// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module image_filter_Block_Mat_exit1222_proc1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        p_read2,
        p_read6,
        p_read7,
        src0_data_stream_0_V_dout,
        src0_data_stream_0_V_empty_n,
        src0_data_stream_0_V_read,
        src0_data_stream_1_V_dout,
        src0_data_stream_1_V_empty_n,
        src0_data_stream_1_V_read,
        src0_data_stream_2_V_dout,
        src0_data_stream_2_V_empty_n,
        src0_data_stream_2_V_read,
        gray_data_stream_0_V_din,
        gray_data_stream_0_V_full_n,
        gray_data_stream_0_V_write,
        ap_return_0,
        ap_return_1
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 2'b1;
parameter    ap_ST_st2_fsm_1 = 2'b10;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv12_0 = 12'b000000000000;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [11:0] p_read;
input  [11:0] p_read2;
input  [11:0] p_read6;
input  [11:0] p_read7;
input  [7:0] src0_data_stream_0_V_dout;
input   src0_data_stream_0_V_empty_n;
output   src0_data_stream_0_V_read;
input  [7:0] src0_data_stream_1_V_dout;
input   src0_data_stream_1_V_empty_n;
output   src0_data_stream_1_V_read;
input  [7:0] src0_data_stream_2_V_dout;
input   src0_data_stream_2_V_empty_n;
output   src0_data_stream_2_V_read;
output  [7:0] gray_data_stream_0_V_din;
input   gray_data_stream_0_V_full_n;
output   gray_data_stream_0_V_write;
output  [11:0] ap_return_0;
output  [11:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src0_data_stream_0_V_read;
reg src0_data_stream_1_V_read;
reg src0_data_stream_2_V_read;
reg gray_data_stream_0_V_write;
reg[11:0] ap_return_0;
reg[11:0] ap_return_1;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm = 2'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_21;
reg    ap_sig_bdd_56;
wire    grp_image_filter_CvtColor_fu_67_ap_start;
wire    grp_image_filter_CvtColor_fu_67_ap_done;
wire    grp_image_filter_CvtColor_fu_67_ap_idle;
wire    grp_image_filter_CvtColor_fu_67_ap_ready;
wire   [11:0] grp_image_filter_CvtColor_fu_67_p_src_rows_V_read;
wire   [11:0] grp_image_filter_CvtColor_fu_67_p_src_cols_V_read;
wire   [7:0] grp_image_filter_CvtColor_fu_67_p_src_data_stream_0_V_dout;
wire    grp_image_filter_CvtColor_fu_67_p_src_data_stream_0_V_empty_n;
wire    grp_image_filter_CvtColor_fu_67_p_src_data_stream_0_V_read;
wire   [7:0] grp_image_filter_CvtColor_fu_67_p_src_data_stream_1_V_dout;
wire    grp_image_filter_CvtColor_fu_67_p_src_data_stream_1_V_empty_n;
wire    grp_image_filter_CvtColor_fu_67_p_src_data_stream_1_V_read;
wire   [7:0] grp_image_filter_CvtColor_fu_67_p_src_data_stream_2_V_dout;
wire    grp_image_filter_CvtColor_fu_67_p_src_data_stream_2_V_empty_n;
wire    grp_image_filter_CvtColor_fu_67_p_src_data_stream_2_V_read;
wire   [7:0] grp_image_filter_CvtColor_fu_67_p_dst_data_stream_V_din;
wire    grp_image_filter_CvtColor_fu_67_p_dst_data_stream_V_full_n;
wire    grp_image_filter_CvtColor_fu_67_p_dst_data_stream_V_write;
reg    grp_image_filter_CvtColor_fu_67_ap_start_ap_start_reg = 1'b0;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_88;
reg   [11:0] ap_return_0_preg = 12'b000000000000;
reg   [11:0] ap_return_1_preg = 12'b000000000000;
reg   [1:0] ap_NS_fsm;


image_filter_CvtColor grp_image_filter_CvtColor_fu_67(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( grp_image_filter_CvtColor_fu_67_ap_start ),
    .ap_done( grp_image_filter_CvtColor_fu_67_ap_done ),
    .ap_idle( grp_image_filter_CvtColor_fu_67_ap_idle ),
    .ap_ready( grp_image_filter_CvtColor_fu_67_ap_ready ),
    .p_src_rows_V_read( grp_image_filter_CvtColor_fu_67_p_src_rows_V_read ),
    .p_src_cols_V_read( grp_image_filter_CvtColor_fu_67_p_src_cols_V_read ),
    .p_src_data_stream_0_V_dout( grp_image_filter_CvtColor_fu_67_p_src_data_stream_0_V_dout ),
    .p_src_data_stream_0_V_empty_n( grp_image_filter_CvtColor_fu_67_p_src_data_stream_0_V_empty_n ),
    .p_src_data_stream_0_V_read( grp_image_filter_CvtColor_fu_67_p_src_data_stream_0_V_read ),
    .p_src_data_stream_1_V_dout( grp_image_filter_CvtColor_fu_67_p_src_data_stream_1_V_dout ),
    .p_src_data_stream_1_V_empty_n( grp_image_filter_CvtColor_fu_67_p_src_data_stream_1_V_empty_n ),
    .p_src_data_stream_1_V_read( grp_image_filter_CvtColor_fu_67_p_src_data_stream_1_V_read ),
    .p_src_data_stream_2_V_dout( grp_image_filter_CvtColor_fu_67_p_src_data_stream_2_V_dout ),
    .p_src_data_stream_2_V_empty_n( grp_image_filter_CvtColor_fu_67_p_src_data_stream_2_V_empty_n ),
    .p_src_data_stream_2_V_read( grp_image_filter_CvtColor_fu_67_p_src_data_stream_2_V_read ),
    .p_dst_data_stream_V_din( grp_image_filter_CvtColor_fu_67_p_dst_data_stream_V_din ),
    .p_dst_data_stream_V_full_n( grp_image_filter_CvtColor_fu_67_p_dst_data_stream_V_full_n ),
    .p_dst_data_stream_V_write( grp_image_filter_CvtColor_fu_67_p_dst_data_stream_V_write )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_logic_0 == grp_image_filter_CvtColor_fu_67_ap_done))) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// ap_return_0_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_return_0_preg
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= ap_const_lv12_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_logic_0 == grp_image_filter_CvtColor_fu_67_ap_done))) begin
            ap_return_0_preg <= p_read;
        end
    end
end

/// ap_return_1_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_return_1_preg
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= ap_const_lv12_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_logic_0 == grp_image_filter_CvtColor_fu_67_ap_done))) begin
            ap_return_1_preg <= p_read2;
        end
    end
end

/// grp_image_filter_CvtColor_fu_67_ap_start_ap_start_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_grp_image_filter_CvtColor_fu_67_ap_start_ap_start_reg
    if (ap_rst == 1'b1) begin
        grp_image_filter_CvtColor_fu_67_ap_start_ap_start_reg <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_56)) begin
            grp_image_filter_CvtColor_fu_67_ap_start_ap_start_reg <= ap_const_logic_1;
        end else if ((ap_const_logic_1 == grp_image_filter_CvtColor_fu_67_ap_ready)) begin
            grp_image_filter_CvtColor_fu_67_ap_start_ap_start_reg <= ap_const_logic_0;
        end
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or grp_image_filter_CvtColor_fu_67_ap_done or ap_sig_cseq_ST_st2_fsm_1)
begin
    if (((ap_const_logic_1 == ap_done_reg) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_logic_0 == grp_image_filter_CvtColor_fu_67_ap_done)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (grp_image_filter_CvtColor_fu_67_ap_done or ap_sig_cseq_ST_st2_fsm_1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_logic_0 == grp_image_filter_CvtColor_fu_67_ap_done))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_return_0 assign process. ///
always @ (p_read or grp_image_filter_CvtColor_fu_67_ap_done or ap_sig_cseq_ST_st2_fsm_1 or ap_return_0_preg)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_logic_0 == grp_image_filter_CvtColor_fu_67_ap_done))) begin
        ap_return_0 = p_read;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

/// ap_return_1 assign process. ///
always @ (p_read2 or grp_image_filter_CvtColor_fu_67_ap_done or ap_sig_cseq_ST_st2_fsm_1 or ap_return_1_preg)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_logic_0 == grp_image_filter_CvtColor_fu_67_ap_done))) begin
        ap_return_1 = p_read2;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_21)
begin
    if (ap_sig_bdd_21) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_88)
begin
    if (ap_sig_bdd_88) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// gray_data_stream_0_V_write assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or grp_image_filter_CvtColor_fu_67_p_dst_data_stream_V_write or ap_sig_cseq_ST_st2_fsm_1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) | (ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1))) begin
        gray_data_stream_0_V_write = grp_image_filter_CvtColor_fu_67_p_dst_data_stream_V_write;
    end else begin
        gray_data_stream_0_V_write = ap_const_logic_0;
    end
end

/// src0_data_stream_0_V_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or grp_image_filter_CvtColor_fu_67_p_src_data_stream_0_V_read or ap_sig_cseq_ST_st2_fsm_1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) | (ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1))) begin
        src0_data_stream_0_V_read = grp_image_filter_CvtColor_fu_67_p_src_data_stream_0_V_read;
    end else begin
        src0_data_stream_0_V_read = ap_const_logic_0;
    end
end

/// src0_data_stream_1_V_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or grp_image_filter_CvtColor_fu_67_p_src_data_stream_1_V_read or ap_sig_cseq_ST_st2_fsm_1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) | (ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1))) begin
        src0_data_stream_1_V_read = grp_image_filter_CvtColor_fu_67_p_src_data_stream_1_V_read;
    end else begin
        src0_data_stream_1_V_read = ap_const_logic_0;
    end
end

/// src0_data_stream_2_V_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or grp_image_filter_CvtColor_fu_67_p_src_data_stream_2_V_read or ap_sig_cseq_ST_st2_fsm_1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) | (ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1))) begin
        src0_data_stream_2_V_read = grp_image_filter_CvtColor_fu_67_p_src_data_stream_2_V_read;
    end else begin
        src0_data_stream_2_V_read = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or ap_sig_bdd_56 or grp_image_filter_CvtColor_fu_67_ap_done)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~ap_sig_bdd_56) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(ap_const_logic_0 == grp_image_filter_CvtColor_fu_67_ap_done)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_21 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_21 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_56 assign process. ///
always @ (ap_start or ap_done_reg)
begin
    ap_sig_bdd_56 = ((ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end

/// ap_sig_bdd_88 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_88 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end
assign gray_data_stream_0_V_din = grp_image_filter_CvtColor_fu_67_p_dst_data_stream_V_din;
assign grp_image_filter_CvtColor_fu_67_ap_start = grp_image_filter_CvtColor_fu_67_ap_start_ap_start_reg;
assign grp_image_filter_CvtColor_fu_67_p_dst_data_stream_V_full_n = gray_data_stream_0_V_full_n;
assign grp_image_filter_CvtColor_fu_67_p_src_cols_V_read = p_read7;
assign grp_image_filter_CvtColor_fu_67_p_src_data_stream_0_V_dout = src0_data_stream_0_V_dout;
assign grp_image_filter_CvtColor_fu_67_p_src_data_stream_0_V_empty_n = src0_data_stream_0_V_empty_n;
assign grp_image_filter_CvtColor_fu_67_p_src_data_stream_1_V_dout = src0_data_stream_1_V_dout;
assign grp_image_filter_CvtColor_fu_67_p_src_data_stream_1_V_empty_n = src0_data_stream_1_V_empty_n;
assign grp_image_filter_CvtColor_fu_67_p_src_data_stream_2_V_dout = src0_data_stream_2_V_dout;
assign grp_image_filter_CvtColor_fu_67_p_src_data_stream_2_V_empty_n = src0_data_stream_2_V_empty_n;
assign grp_image_filter_CvtColor_fu_67_p_src_rows_V_read = p_read6;


endmodule //image_filter_Block_Mat_exit1222_proc1

