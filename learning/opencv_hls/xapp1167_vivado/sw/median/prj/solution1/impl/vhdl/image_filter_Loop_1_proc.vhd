-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity image_filter_Loop_1_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    rows : IN STD_LOGIC_VECTOR (31 downto 0);
    cols : IN STD_LOGIC_VECTOR (31 downto 0);
    img_1_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_1_data_stream_0_V_full_n : IN STD_LOGIC;
    img_1_data_stream_0_V_write : OUT STD_LOGIC;
    img_1_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_1_data_stream_1_V_full_n : IN STD_LOGIC;
    img_1_data_stream_1_V_write : OUT STD_LOGIC;
    img_1_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_1_data_stream_2_V_full_n : IN STD_LOGIC;
    img_1_data_stream_2_V_write : OUT STD_LOGIC;
    img_0_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_0_data_stream_0_V_empty_n : IN STD_LOGIC;
    img_0_data_stream_0_V_read : OUT STD_LOGIC;
    img_0_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_0_data_stream_1_V_empty_n : IN STD_LOGIC;
    img_0_data_stream_1_V_read : OUT STD_LOGIC;
    img_0_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_0_data_stream_2_V_empty_n : IN STD_LOGIC;
    img_0_data_stream_2_V_read : OUT STD_LOGIC;
    buffer_val_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    buffer_val_0_ce0 : OUT STD_LOGIC;
    buffer_val_0_we0 : OUT STD_LOGIC;
    buffer_val_0_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer_val_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer_val_0_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    buffer_val_0_ce1 : OUT STD_LOGIC;
    buffer_val_0_we1 : OUT STD_LOGIC;
    buffer_val_0_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer_val_0_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer_val_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    buffer_val_1_ce0 : OUT STD_LOGIC;
    buffer_val_1_we0 : OUT STD_LOGIC;
    buffer_val_1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer_val_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer_val_1_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    buffer_val_1_ce1 : OUT STD_LOGIC;
    buffer_val_1_we1 : OUT STD_LOGIC;
    buffer_val_1_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer_val_1_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer_val_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    buffer_val_2_ce0 : OUT STD_LOGIC;
    buffer_val_2_we0 : OUT STD_LOGIC;
    buffer_val_2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer_val_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer_val_2_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    buffer_val_2_ce1 : OUT STD_LOGIC;
    buffer_val_2_we1 : OUT STD_LOGIC;
    buffer_val_2_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer_val_2_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of image_filter_Loop_1_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_pp0_stg0_fsm_2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_pp0_stg1_fsm_3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_pp0_stg2_fsm_4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_st7_fsm_5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_25 : BOOLEAN;
    signal col_reg_269 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_281_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_bdd_104 : BOOLEAN;
    signal tmp_2_fu_285_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal buffer_val_0_addr_gep_fu_159_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal buffer_val_0_addr_reg_551 : STD_LOGIC_VECTOR (1 downto 0);
    signal buffer_val_0_addr_1_gep_fu_167_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal buffer_val_0_addr_1_reg_556 : STD_LOGIC_VECTOR (1 downto 0);
    signal buffer_val_1_addr_gep_fu_175_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal buffer_val_1_addr_reg_561 : STD_LOGIC_VECTOR (1 downto 0);
    signal buffer_val_1_addr_1_gep_fu_183_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal buffer_val_1_addr_1_reg_566 : STD_LOGIC_VECTOR (1 downto 0);
    signal buffer_val_2_addr_gep_fu_191_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal buffer_val_2_addr_reg_571 : STD_LOGIC_VECTOR (1 downto 0);
    signal buffer_val_2_addr_1_gep_fu_199_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal buffer_val_2_addr_1_reg_577 : STD_LOGIC_VECTOR (1 downto 0);
    signal buffer_val_0_addr_2_gep_fu_207_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal buffer_val_0_addr_2_reg_582 : STD_LOGIC_VECTOR (1 downto 0);
    signal buffer_val_1_addr_2_gep_fu_215_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal buffer_val_1_addr_2_reg_587 : STD_LOGIC_VECTOR (1 downto 0);
    signal buffer_val_2_addr_2_gep_fu_223_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal buffer_val_2_addr_2_reg_592 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond2_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_134 : BOOLEAN;
    signal row_1_fu_298_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal row_1_reg_602 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond1_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_607 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_145 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_sig_bdd_159 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal col_1_fu_313_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal col_1_reg_611 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_616 : STD_LOGIC_VECTOR (0 downto 0);
    signal scl_val_0_reg_624 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_pp0_stg1_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_180 : BOOLEAN;
    signal ap_sig_bdd_190 : BOOLEAN;
    signal scl_val_1_reg_630 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_val_2_reg_636 : STD_LOGIC_VECTOR (7 downto 0);
    signal buffer_val_0_load_reg_643 : STD_LOGIC_VECTOR (7 downto 0);
    signal buffer_val_1_load_reg_649 : STD_LOGIC_VECTOR (7 downto 0);
    signal buffer_val_2_load_reg_655 : STD_LOGIC_VECTOR (7 downto 0);
    signal buffer_val_0_load_1_reg_660 : STD_LOGIC_VECTOR (7 downto 0);
    signal buffer_val_1_load_1_reg_665 : STD_LOGIC_VECTOR (7 downto 0);
    signal buffer_val_2_load_1_reg_670 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_reg_675 : STD_LOGIC_VECTOR (0 downto 0);
    signal ult_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ult_reg_681 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev1_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev1_reg_686 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_1_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_1_reg_691 : STD_LOGIC_VECTOR (0 downto 0);
    signal ult2_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ult2_reg_697 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev3_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev3_reg_702 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_2_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_2_reg_707 : STD_LOGIC_VECTOR (0 downto 0);
    signal ult4_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ult4_reg_713 : STD_LOGIC_VECTOR (0 downto 0);
    signal ult5_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ult5_reg_718 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_val_0_1_fu_427_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_val_0_1_reg_723 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_pp0_stg2_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_230 : BOOLEAN;
    signal p_val_1_1_fu_460_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_val_1_1_reg_728 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_val_0_2_fu_499_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_val_0_2_reg_733 : STD_LOGIC_VECTOR (7 downto 0);
    signal sel_tmp2_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_reg_738 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_val_1_2_fu_510_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_val_1_2_reg_744 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_521_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_reg_749 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_reg_258 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_257 : BOOLEAN;
    signal col_phi_fu_273_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal row_cast_fu_289_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal col_cast_fu_304_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_3_fu_319_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ult1_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ult3_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_0_not_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge1_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer_val_0_load_scl_val_0_fu_421_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal rev2_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_0_not_1_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge1_1_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_1_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer_val_1_load_scl_val_1_fu_454_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal rev4_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_0_not_2_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev5_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge1_2_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_2_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer_val_2_load_p_val_2_fu_493_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sel_tmp9_fu_516_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond2_fu_293_p2 = ap_const_lv1_0)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not((ap_sig_bdd_159 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((exitcond1_fu_308_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond2_fu_293_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((exitcond1_reg_607 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_4))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond2_fu_293_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_4) and not((exitcond1_reg_607 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- col_reg_269 assign process. --
    col_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (exitcond1_reg_607 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_159 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                col_reg_269 <= col_1_reg_611;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond2_fu_293_p2 = ap_const_lv1_0))) then 
                col_reg_269 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    -- row_reg_258 assign process. --
    row_reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_104))) then 
                row_reg_258 <= ap_const_lv11_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5)) then 
                row_reg_258 <= row_1_reg_602;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_607 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_3) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_190)))) then
                buffer_val_0_load_1_reg_660 <= buffer_val_0_q1;
                buffer_val_0_load_reg_643 <= buffer_val_0_q0;
                buffer_val_1_load_1_reg_665 <= buffer_val_1_q1;
                buffer_val_1_load_reg_649 <= buffer_val_1_q0;
                buffer_val_2_load_1_reg_670 <= buffer_val_2_q1;
                buffer_val_2_load_reg_655 <= buffer_val_2_q0;
                c_1_reg_691 <= c_1_fu_359_p2;
                c_2_reg_707 <= c_2_fu_383_p2;
                c_reg_675 <= c_fu_335_p2;
                p_val_2_reg_636 <= img_0_data_stream_2_V_dout;
                rev1_reg_686 <= rev1_fu_353_p2;
                rev3_reg_702 <= rev3_fu_377_p2;
                scl_val_0_reg_624 <= img_0_data_stream_0_V_dout;
                scl_val_1_reg_630 <= img_0_data_stream_1_V_dout;
                ult2_reg_697 <= ult2_fu_365_p2;
                ult4_reg_713 <= ult4_fu_389_p2;
                ult5_reg_718 <= ult5_fu_395_p2;
                ult_reg_681 <= ult_fu_341_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_159 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                col_1_reg_611 <= col_1_fu_313_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not((ap_sig_bdd_159 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                exitcond1_reg_607 <= exitcond1_fu_308_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not((ap_sig_bdd_159 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (exitcond1_fu_308_p2 = ap_const_lv1_0))) then
                icmp_reg_616 <= icmp_fu_329_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_607 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_4))) then
                p_val_0_1_reg_723 <= p_val_0_1_fu_427_p3;
                p_val_0_2_reg_733 <= p_val_0_2_fu_499_p3;
                p_val_1_1_reg_728 <= p_val_1_1_fu_460_p3;
                p_val_1_2_reg_744 <= p_val_1_2_fu_510_p3;
                sel_tmp2_reg_738 <= sel_tmp2_fu_505_p2;
                tmp_6_reg_749 <= tmp_6_fu_521_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                row_1_reg_602 <= row_1_fu_298_p2;
            end if;
        end if;
    end process;
    buffer_val_0_addr_reg_551(1 downto 0) <= "01";
    buffer_val_0_addr_1_reg_556(1 downto 0) <= "10";
    buffer_val_1_addr_reg_561(1 downto 0) <= "01";
    buffer_val_1_addr_1_reg_566(1 downto 0) <= "10";
    buffer_val_2_addr_reg_571(1 downto 0) <= "01";
    buffer_val_2_addr_1_reg_577(1 downto 0) <= "10";
    buffer_val_0_addr_2_reg_582(1 downto 0) <= "00";
    buffer_val_1_addr_2_reg_587(1 downto 0) <= "00";
    buffer_val_2_addr_2_reg_592(1 downto 0) <= "00";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_sig_bdd_104, exitcond2_fu_293_p2, exitcond1_fu_308_p2, ap_reg_ppiten_pp0_it0, ap_sig_bdd_159, ap_reg_ppiten_pp0_it1, ap_sig_bdd_190)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_104)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond2_fu_293_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                end if;
            when ap_ST_pp0_stg0_fsm_2 => 
                if ((not((ap_sig_bdd_159 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_159 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((exitcond1_fu_308_p2 = ap_const_lv1_0)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_3;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_159 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((exitcond1_fu_308_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                end if;
            when ap_ST_pp0_stg1_fsm_3 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_190))) then
                    ap_NS_fsm <= ap_ST_pp0_stg2_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_3;
                end if;
            when ap_ST_pp0_stg2_fsm_4 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
            when ap_ST_st7_fsm_5 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, exitcond2_fu_293_p2, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond2_fu_293_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(exitcond2_fu_293_p2, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond2_fu_293_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_104 assign process. --
    ap_sig_bdd_104_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_104 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_134 assign process. --
    ap_sig_bdd_134_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_134 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_145 assign process. --
    ap_sig_bdd_145_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_145 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_159 assign process. --
    ap_sig_bdd_159_assign_proc : process(img_1_data_stream_0_V_full_n, img_1_data_stream_1_V_full_n, img_1_data_stream_2_V_full_n, exitcond1_reg_607)
    begin
                ap_sig_bdd_159 <= (((img_1_data_stream_0_V_full_n = ap_const_logic_0) and (exitcond1_reg_607 = ap_const_lv1_0)) or ((exitcond1_reg_607 = ap_const_lv1_0) and (img_1_data_stream_1_V_full_n = ap_const_logic_0)) or ((exitcond1_reg_607 = ap_const_lv1_0) and (img_1_data_stream_2_V_full_n = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_180 assign process. --
    ap_sig_bdd_180_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_180 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_190 assign process. --
    ap_sig_bdd_190_assign_proc : process(img_0_data_stream_0_V_empty_n, img_0_data_stream_1_V_empty_n, img_0_data_stream_2_V_empty_n, exitcond1_reg_607)
    begin
                ap_sig_bdd_190 <= (((exitcond1_reg_607 = ap_const_lv1_0) and (img_0_data_stream_0_V_empty_n = ap_const_logic_0)) or ((exitcond1_reg_607 = ap_const_lv1_0) and (img_0_data_stream_1_V_empty_n = ap_const_logic_0)) or ((exitcond1_reg_607 = ap_const_lv1_0) and (img_0_data_stream_2_V_empty_n = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_230 assign process. --
    ap_sig_bdd_230_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_230 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_25 assign process. --
    ap_sig_bdd_25_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_25 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_257 assign process. --
    ap_sig_bdd_257_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_257 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_2 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_2_assign_proc : process(ap_sig_bdd_145)
    begin
        if (ap_sig_bdd_145) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg1_fsm_3 assign process. --
    ap_sig_cseq_ST_pp0_stg1_fsm_3_assign_proc : process(ap_sig_bdd_180)
    begin
        if (ap_sig_bdd_180) then 
            ap_sig_cseq_ST_pp0_stg1_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg1_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg2_fsm_4 assign process. --
    ap_sig_cseq_ST_pp0_stg2_fsm_4_assign_proc : process(ap_sig_bdd_230)
    begin
        if (ap_sig_bdd_230) then 
            ap_sig_cseq_ST_pp0_stg2_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg2_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_25)
    begin
        if (ap_sig_bdd_25) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_134)
    begin
        if (ap_sig_bdd_134) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_5 assign process. --
    ap_sig_cseq_ST_st7_fsm_5_assign_proc : process(ap_sig_bdd_257)
    begin
        if (ap_sig_bdd_257) then 
            ap_sig_cseq_ST_st7_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge1_1_fu_450_p2 <= (rev3_reg_702 or c_1_reg_691);
    brmerge1_2_fu_488_p2 <= (rev5_fu_483_p2 or c_2_reg_707);
    brmerge1_fu_417_p2 <= (rev1_reg_686 or c_reg_675);
    brmerge_1_fu_444_p2 <= (rev2_fu_434_p2 or c_0_not_1_fu_439_p2);
    brmerge_2_fu_477_p2 <= (rev4_fu_467_p2 or c_0_not_2_fu_472_p2);
    brmerge_fu_411_p2 <= (rev_fu_401_p2 or c_0_not_fu_406_p2);
    buffer_val_0_addr_1_gep_fu_167_p3 <= ap_const_lv64_2(2 - 1 downto 0);
    buffer_val_0_addr_2_gep_fu_207_p3 <= ap_const_lv64_0(2 - 1 downto 0);
    buffer_val_0_addr_gep_fu_159_p3 <= ap_const_lv64_1(2 - 1 downto 0);

    -- buffer_val_0_address0 assign process. --
    buffer_val_0_address0_assign_proc : process(buffer_val_0_addr_reg_551, buffer_val_0_addr_1_reg_556, ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_3, ap_sig_cseq_ST_pp0_stg2_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_4))) then 
            buffer_val_0_address0 <= buffer_val_0_addr_1_reg_556;
        elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_3)))) then 
            buffer_val_0_address0 <= buffer_val_0_addr_reg_551;
        else 
            buffer_val_0_address0 <= "XX";
        end if; 
    end process;

    buffer_val_0_address1 <= buffer_val_0_addr_2_reg_582;

    -- buffer_val_0_ce0 assign process. --
    buffer_val_0_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it0, ap_sig_bdd_159, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_3, ap_sig_bdd_190, ap_sig_cseq_ST_pp0_stg2_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_159 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_3) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_190))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_4)))) then 
            buffer_val_0_ce0 <= ap_const_logic_1;
        else 
            buffer_val_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- buffer_val_0_ce1 assign process. --
    buffer_val_0_ce1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it0, ap_sig_bdd_159, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_3, ap_sig_bdd_190)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_159 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_3) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_190))))) then 
            buffer_val_0_ce1 <= ap_const_logic_1;
        else 
            buffer_val_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- buffer_val_0_d0 assign process. --
    buffer_val_0_d0_assign_proc : process(buffer_val_0_q1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_3, buffer_val_0_load_reg_643, ap_sig_cseq_ST_pp0_stg2_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_4)) then 
                buffer_val_0_d0 <= buffer_val_0_load_reg_643;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_3)) then 
                buffer_val_0_d0 <= buffer_val_0_q1;
            else 
                buffer_val_0_d0 <= "XXXXXXXX";
            end if;
        else 
            buffer_val_0_d0 <= "XXXXXXXX";
        end if; 
    end process;

    buffer_val_0_d1 <= img_0_data_stream_0_V_dout;
    buffer_val_0_load_scl_val_0_fu_421_p3 <= 
        buffer_val_0_load_reg_643 when (brmerge1_fu_417_p2(0) = '1') else 
        scl_val_0_reg_624;

    -- buffer_val_0_we0 assign process. --
    buffer_val_0_we0_assign_proc : process(exitcond1_reg_607, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_3, ap_sig_bdd_190, ap_sig_cseq_ST_pp0_stg2_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_607 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_3) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_190))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_607 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_4)))) then 
            buffer_val_0_we0 <= ap_const_logic_1;
        else 
            buffer_val_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- buffer_val_0_we1 assign process. --
    buffer_val_0_we1_assign_proc : process(exitcond1_reg_607, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_3, ap_sig_bdd_190)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_607 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_3) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_190))))) then 
            buffer_val_0_we1 <= ap_const_logic_1;
        else 
            buffer_val_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_val_1_addr_1_gep_fu_183_p3 <= ap_const_lv64_2(2 - 1 downto 0);
    buffer_val_1_addr_2_gep_fu_215_p3 <= ap_const_lv64_0(2 - 1 downto 0);
    buffer_val_1_addr_gep_fu_175_p3 <= ap_const_lv64_1(2 - 1 downto 0);

    -- buffer_val_1_address0 assign process. --
    buffer_val_1_address0_assign_proc : process(buffer_val_1_addr_reg_561, buffer_val_1_addr_1_reg_566, ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_3, ap_sig_cseq_ST_pp0_stg2_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_4))) then 
            buffer_val_1_address0 <= buffer_val_1_addr_1_reg_566;
        elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_3)))) then 
            buffer_val_1_address0 <= buffer_val_1_addr_reg_561;
        else 
            buffer_val_1_address0 <= "XX";
        end if; 
    end process;

    buffer_val_1_address1 <= buffer_val_1_addr_2_reg_587;

    -- buffer_val_1_ce0 assign process. --
    buffer_val_1_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it0, ap_sig_bdd_159, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_3, ap_sig_bdd_190, ap_sig_cseq_ST_pp0_stg2_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_159 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_3) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_190))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_4)))) then 
            buffer_val_1_ce0 <= ap_const_logic_1;
        else 
            buffer_val_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- buffer_val_1_ce1 assign process. --
    buffer_val_1_ce1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it0, ap_sig_bdd_159, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_3, ap_sig_bdd_190)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_159 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_3) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_190))))) then 
            buffer_val_1_ce1 <= ap_const_logic_1;
        else 
            buffer_val_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- buffer_val_1_d0 assign process. --
    buffer_val_1_d0_assign_proc : process(buffer_val_1_q1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_3, buffer_val_1_load_reg_649, ap_sig_cseq_ST_pp0_stg2_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_4)) then 
                buffer_val_1_d0 <= buffer_val_1_load_reg_649;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_3)) then 
                buffer_val_1_d0 <= buffer_val_1_q1;
            else 
                buffer_val_1_d0 <= "XXXXXXXX";
            end if;
        else 
            buffer_val_1_d0 <= "XXXXXXXX";
        end if; 
    end process;

    buffer_val_1_d1 <= img_0_data_stream_1_V_dout;
    buffer_val_1_load_scl_val_1_fu_454_p3 <= 
        buffer_val_1_load_reg_649 when (brmerge1_1_fu_450_p2(0) = '1') else 
        scl_val_1_reg_630;

    -- buffer_val_1_we0 assign process. --
    buffer_val_1_we0_assign_proc : process(exitcond1_reg_607, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_3, ap_sig_bdd_190, ap_sig_cseq_ST_pp0_stg2_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_607 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_3) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_190))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_607 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_4)))) then 
            buffer_val_1_we0 <= ap_const_logic_1;
        else 
            buffer_val_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- buffer_val_1_we1 assign process. --
    buffer_val_1_we1_assign_proc : process(exitcond1_reg_607, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_3, ap_sig_bdd_190)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_607 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_3) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_190))))) then 
            buffer_val_1_we1 <= ap_const_logic_1;
        else 
            buffer_val_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_val_2_addr_1_gep_fu_199_p3 <= ap_const_lv64_2(2 - 1 downto 0);
    buffer_val_2_addr_2_gep_fu_223_p3 <= ap_const_lv64_0(2 - 1 downto 0);
    buffer_val_2_addr_gep_fu_191_p3 <= ap_const_lv64_1(2 - 1 downto 0);

    -- buffer_val_2_address0 assign process. --
    buffer_val_2_address0_assign_proc : process(buffer_val_2_addr_reg_571, buffer_val_2_addr_1_reg_577, buffer_val_2_addr_2_reg_592, ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_3, ap_sig_cseq_ST_pp0_stg2_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_4)) then 
                buffer_val_2_address0 <= buffer_val_2_addr_2_reg_592;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_3)) then 
                buffer_val_2_address0 <= buffer_val_2_addr_1_reg_577;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2)) then 
                buffer_val_2_address0 <= buffer_val_2_addr_reg_571;
            else 
                buffer_val_2_address0 <= "XX";
            end if;
        else 
            buffer_val_2_address0 <= "XX";
        end if; 
    end process;


    -- buffer_val_2_address1 assign process. --
    buffer_val_2_address1_assign_proc : process(buffer_val_2_addr_reg_571, buffer_val_2_addr_2_reg_592, ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_3)) then 
                buffer_val_2_address1 <= buffer_val_2_addr_reg_571;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2)) then 
                buffer_val_2_address1 <= buffer_val_2_addr_2_reg_592;
            else 
                buffer_val_2_address1 <= "XX";
            end if;
        else 
            buffer_val_2_address1 <= "XX";
        end if; 
    end process;


    -- buffer_val_2_ce0 assign process. --
    buffer_val_2_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it0, ap_sig_bdd_159, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_3, ap_sig_bdd_190, ap_sig_cseq_ST_pp0_stg2_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_159 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_3) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_190))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_4)))) then 
            buffer_val_2_ce0 <= ap_const_logic_1;
        else 
            buffer_val_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- buffer_val_2_ce1 assign process. --
    buffer_val_2_ce1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it0, ap_sig_bdd_159, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_3, ap_sig_bdd_190)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_159 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_3) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_190))))) then 
            buffer_val_2_ce1 <= ap_const_logic_1;
        else 
            buffer_val_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- buffer_val_2_d0 assign process. --
    buffer_val_2_d0_assign_proc : process(buffer_val_2_q0, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_3, p_val_2_reg_636, ap_sig_cseq_ST_pp0_stg2_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_4)) then 
                buffer_val_2_d0 <= p_val_2_reg_636;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_3)) then 
                buffer_val_2_d0 <= buffer_val_2_q0;
            else 
                buffer_val_2_d0 <= "XXXXXXXX";
            end if;
        else 
            buffer_val_2_d0 <= "XXXXXXXX";
        end if; 
    end process;

    buffer_val_2_d1 <= buffer_val_2_q1;
    buffer_val_2_load_p_val_2_fu_493_p3 <= 
        buffer_val_2_load_reg_655 when (brmerge1_2_fu_488_p2(0) = '1') else 
        p_val_2_reg_636;

    -- buffer_val_2_we0 assign process. --
    buffer_val_2_we0_assign_proc : process(exitcond1_reg_607, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_3, ap_sig_bdd_190, ap_sig_cseq_ST_pp0_stg2_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_607 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_3) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_190))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_607 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_4)))) then 
            buffer_val_2_we0 <= ap_const_logic_1;
        else 
            buffer_val_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- buffer_val_2_we1 assign process. --
    buffer_val_2_we1_assign_proc : process(exitcond1_reg_607, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_3, ap_sig_bdd_190)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_607 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_3) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_190))))) then 
            buffer_val_2_we1 <= ap_const_logic_1;
        else 
            buffer_val_2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    c_0_not_1_fu_439_p2 <= (c_1_reg_691 xor ap_const_lv1_1);
    c_0_not_2_fu_472_p2 <= (c_2_reg_707 xor ap_const_lv1_1);
    c_0_not_fu_406_p2 <= (c_reg_675 xor ap_const_lv1_1);
    c_1_fu_359_p2 <= "1" when (unsigned(buffer_val_1_q1) > unsigned(img_0_data_stream_1_V_dout)) else "0";
    c_2_fu_383_p2 <= "1" when (unsigned(buffer_val_2_q1) > unsigned(img_0_data_stream_2_V_dout)) else "0";
    c_fu_335_p2 <= "1" when (unsigned(buffer_val_0_q1) > unsigned(img_0_data_stream_0_V_dout)) else "0";
    col_1_fu_313_p2 <= std_logic_vector(unsigned(col_phi_fu_273_p4) + unsigned(ap_const_lv11_1));
    col_cast_fu_304_p1 <= std_logic_vector(resize(unsigned(col_phi_fu_273_p4),12));

    -- col_phi_fu_273_p4 assign process. --
    col_phi_fu_273_p4_assign_proc : process(col_reg_269, exitcond1_reg_607, ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it1, col_1_reg_611)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (exitcond1_reg_607 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            col_phi_fu_273_p4 <= col_1_reg_611;
        else 
            col_phi_fu_273_p4 <= col_reg_269;
        end if; 
    end process;

    exitcond1_fu_308_p2 <= "1" when (col_cast_fu_304_p1 = tmp_2_fu_285_p1) else "0";
    exitcond2_fu_293_p2 <= "1" when (row_cast_fu_289_p1 = tmp_fu_281_p1) else "0";
    icmp_fu_329_p2 <= "0" when (tmp_3_fu_319_p4 = ap_const_lv10_0) else "1";

    -- img_0_data_stream_0_V_read assign process. --
    img_0_data_stream_0_V_read_assign_proc : process(exitcond1_reg_607, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_3, ap_sig_bdd_190)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_607 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_3) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_190)))) then 
            img_0_data_stream_0_V_read <= ap_const_logic_1;
        else 
            img_0_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- img_0_data_stream_1_V_read assign process. --
    img_0_data_stream_1_V_read_assign_proc : process(exitcond1_reg_607, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_3, ap_sig_bdd_190)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_607 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_3) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_190)))) then 
            img_0_data_stream_1_V_read <= ap_const_logic_1;
        else 
            img_0_data_stream_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- img_0_data_stream_2_V_read assign process. --
    img_0_data_stream_2_V_read_assign_proc : process(exitcond1_reg_607, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_3, ap_sig_bdd_190)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_607 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_3) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_190)))) then 
            img_0_data_stream_2_V_read <= ap_const_logic_1;
        else 
            img_0_data_stream_2_V_read <= ap_const_logic_0;
        end if; 
    end process;

    img_1_data_stream_0_V_din <= 
        p_val_0_1_reg_723 when (sel_tmp2_reg_738(0) = '1') else 
        p_val_0_2_reg_733;

    -- img_1_data_stream_0_V_write assign process. --
    img_1_data_stream_0_V_write_assign_proc : process(exitcond1_reg_607, ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_sig_bdd_159, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (exitcond1_reg_607 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_159 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            img_1_data_stream_0_V_write <= ap_const_logic_1;
        else 
            img_1_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;

    img_1_data_stream_1_V_din <= 
        p_val_1_1_reg_728 when (sel_tmp2_reg_738(0) = '1') else 
        p_val_1_2_reg_744;

    -- img_1_data_stream_1_V_write assign process. --
    img_1_data_stream_1_V_write_assign_proc : process(exitcond1_reg_607, ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_sig_bdd_159, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (exitcond1_reg_607 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_159 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            img_1_data_stream_1_V_write <= ap_const_logic_1;
        else 
            img_1_data_stream_1_V_write <= ap_const_logic_0;
        end if; 
    end process;

    img_1_data_stream_2_V_din <= tmp_6_reg_749;

    -- img_1_data_stream_2_V_write assign process. --
    img_1_data_stream_2_V_write_assign_proc : process(exitcond1_reg_607, ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_sig_bdd_159, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (exitcond1_reg_607 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_159 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            img_1_data_stream_2_V_write <= ap_const_logic_1;
        else 
            img_1_data_stream_2_V_write <= ap_const_logic_0;
        end if; 
    end process;

    p_val_0_1_fu_427_p3 <= 
        buffer_val_0_load_scl_val_0_fu_421_p3 when (brmerge_fu_411_p2(0) = '1') else 
        buffer_val_0_load_1_reg_660;
    p_val_0_2_fu_499_p3 <= 
        p_val_0_1_fu_427_p3 when (icmp_reg_616(0) = '1') else 
        scl_val_0_reg_624;
    p_val_1_1_fu_460_p3 <= 
        buffer_val_1_load_scl_val_1_fu_454_p3 when (brmerge_1_fu_444_p2(0) = '1') else 
        buffer_val_1_load_1_reg_665;
    p_val_1_2_fu_510_p3 <= 
        p_val_1_1_fu_460_p3 when (icmp_reg_616(0) = '1') else 
        scl_val_1_reg_630;
    rev1_fu_353_p2 <= (ult1_fu_347_p2 xor ap_const_lv1_1);
    rev2_fu_434_p2 <= (ult2_reg_697 xor ap_const_lv1_1);
    rev3_fu_377_p2 <= (ult3_fu_371_p2 xor ap_const_lv1_1);
    rev4_fu_467_p2 <= (ult4_reg_713 xor ap_const_lv1_1);
    rev5_fu_483_p2 <= (ult5_reg_718 xor ap_const_lv1_1);
    rev_fu_401_p2 <= (ult_reg_681 xor ap_const_lv1_1);
    row_1_fu_298_p2 <= std_logic_vector(unsigned(row_reg_258) + unsigned(ap_const_lv11_1));
    row_cast_fu_289_p1 <= std_logic_vector(resize(unsigned(row_reg_258),12));
    sel_tmp2_fu_505_p2 <= (icmp_reg_616 and brmerge_2_fu_477_p2);
    sel_tmp9_fu_516_p3 <= 
        buffer_val_2_load_1_reg_670 when (icmp_reg_616(0) = '1') else 
        p_val_2_reg_636;
    tmp_2_fu_285_p1 <= cols(12 - 1 downto 0);
    tmp_3_fu_319_p4 <= col_phi_fu_273_p4(10 downto 1);
    tmp_6_fu_521_p3 <= 
        buffer_val_2_load_p_val_2_fu_493_p3 when (sel_tmp2_fu_505_p2(0) = '1') else 
        sel_tmp9_fu_516_p3;
    tmp_fu_281_p1 <= rows(12 - 1 downto 0);
    ult1_fu_347_p2 <= "1" when (unsigned(img_0_data_stream_0_V_dout) < unsigned(buffer_val_0_q0)) else "0";
    ult2_fu_365_p2 <= "1" when (unsigned(buffer_val_1_q1) < unsigned(buffer_val_1_q0)) else "0";
    ult3_fu_371_p2 <= "1" when (unsigned(img_0_data_stream_1_V_dout) < unsigned(buffer_val_1_q0)) else "0";
    ult4_fu_389_p2 <= "1" when (unsigned(buffer_val_2_q1) < unsigned(buffer_val_2_q0)) else "0";
    ult5_fu_395_p2 <= "1" when (unsigned(img_0_data_stream_2_V_dout) < unsigned(buffer_val_2_q0)) else "0";
    ult_fu_341_p2 <= "1" when (unsigned(buffer_val_0_q1) < unsigned(buffer_val_0_q0)) else "0";
end behav;
