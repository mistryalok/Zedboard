-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity image_filter_Loop_1_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    rows : IN STD_LOGIC_VECTOR (31 downto 0);
    cols : IN STD_LOGIC_VECTOR (31 downto 0);
    img_0_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_0_data_stream_0_V_empty_n : IN STD_LOGIC;
    img_0_data_stream_0_V_read : OUT STD_LOGIC;
    img_0_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_0_data_stream_1_V_empty_n : IN STD_LOGIC;
    img_0_data_stream_1_V_read : OUT STD_LOGIC;
    img_0_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_0_data_stream_2_V_empty_n : IN STD_LOGIC;
    img_0_data_stream_2_V_read : OUT STD_LOGIC;
    img_1_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_1_data_stream_0_V_full_n : IN STD_LOGIC;
    img_1_data_stream_0_V_write : OUT STD_LOGIC;
    img_1_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_1_data_stream_1_V_full_n : IN STD_LOGIC;
    img_1_data_stream_1_V_write : OUT STD_LOGIC;
    img_1_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_1_data_stream_2_V_full_n : IN STD_LOGIC;
    img_1_data_stream_2_V_write : OUT STD_LOGIC );
end;


architecture behav of image_filter_Loop_1_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_pp0_stg0_fsm_2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_st14_fsm_3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv13_19 : STD_LOGIC_VECTOR (12 downto 0) := "0000000011001";
    constant ap_const_lv10_80 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv22_556 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010101010110";
    constant ap_const_lv8_37 : STD_LOGIC_VECTOR (7 downto 0) := "00110111";
    constant ap_const_lv8_CD : STD_LOGIC_VECTOR (7 downto 0) := "11001101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv9_3C : STD_LOGIC_VECTOR (8 downto 0) := "000111100";
    constant ap_const_lv9_22 : STD_LOGIC_VECTOR (8 downto 0) := "000100010";
    constant ap_true : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_23 : BOOLEAN;
    signal col_reg_357 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_15_cast_fu_390_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_bdd_65 : BOOLEAN;
    signal tmp_16_cast_fu_404_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_9_fu_408_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_10_fu_414_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_21_fu_420_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_24_fu_424_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond1_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_85 : BOOLEAN;
    signal row_1_fu_437_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal row_1_reg_1360 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_1365 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_1370 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_1375 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_1380 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_1385 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_107 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal or_cond_reg_1394 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_124 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it8 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it9 : STD_LOGIC := '0';
    signal or_cond2_reg_1444 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_or_cond2_reg_1444_pp0_it9 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_156 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it10 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_reg_1385_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_1385_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_1385_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_1385_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_1385_pp0_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_1385_pp0_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_1385_pp0_it7 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_1385_pp0_it8 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_1_fu_476_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_cond_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal line_buffer_1_0_val_addr_reg_1398 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_line_buffer_1_0_val_addr_reg_1398_pp0_it1 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_1_1_val_addr_reg_1404 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_line_buffer_1_1_val_addr_reg_1404_pp0_it1 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_1_2_val_addr_reg_1410 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_0_0_val_addr_reg_1416 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_line_buffer_0_0_val_addr_reg_1416_pp0_it1 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_0_1_val_addr_reg_1422 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_line_buffer_0_1_val_addr_reg_1422_pp0_it1 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_0_2_val_addr_reg_1428 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_line_buffer_0_2_val_addr_reg_1428_pp0_it1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp10_reg_1434 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp11_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp11_reg_1439 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_fu_539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_or_cond2_reg_1444_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_or_cond2_reg_1444_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_or_cond2_reg_1444_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_or_cond2_reg_1444_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_or_cond2_reg_1444_pp0_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_or_cond2_reg_1444_pp0_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_or_cond2_reg_1444_pp0_it7 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_or_cond2_reg_1444_pp0_it8 : STD_LOGIC_VECTOR (0 downto 0);
    signal line_buffer_0_2_val_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix_val_2_reg_1453 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_pix_val_2_reg_1453_pp0_it2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_pix_val_2_reg_1453_pp0_it3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_cond3_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_reg_1459 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_or_cond3_reg_1459_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_or_cond3_reg_1459_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_or_cond3_reg_1459_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_or_cond3_reg_1459_pp0_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_or_cond3_reg_1459_pp0_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_or_cond3_reg_1459_pp0_it7 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_or_cond3_reg_1459_pp0_it8 : STD_LOGIC_VECTOR (0 downto 0);
    signal G_5_reg_1463 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_G_5_reg_1463_pp0_it3 : STD_LOGIC_VECTOR (7 downto 0);
    signal R_5_reg_1469 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buffer_1_0_val_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal R_reg_1475 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buffer_1_1_val_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal G_reg_1480 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_fu_597_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp1_reg_1486 : STD_LOGIC_VECTOR (9 downto 0);
    signal line_buffer_0_0_val_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix_val_0_reg_1491 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_pix_val_0_reg_1491_pp0_it3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_pix_val_0_reg_1491_pp0_it4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_pix_val_0_reg_1491_pp0_it5 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_pix_val_0_reg_1491_pp0_it6 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buffer_0_1_val_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix_val_1_reg_1498 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_pix_val_1_reg_1498_pp0_it3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_reg_1515 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp4_fu_703_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp4_reg_1520 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_i2_fu_741_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_6_i2_reg_1525 : STD_LOGIC_VECTOR (14 downto 0);
    signal y_window_2_2_1_reg_1530 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_y_window_2_2_1_reg_1530_pp0_it5 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_window_2_1_2_fu_750_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_window_2_1_2_reg_1536 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_y_window_2_1_2_reg_1536_pp0_it5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i1_reg_1541 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i2_reg_1546 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_i3_fu_880_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_2_i3_reg_1551 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_reg_ppstg_tmp_2_i3_reg_1551_pp0_it5 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_reg_ppstg_tmp_2_i3_reg_1551_pp0_it6 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_window_1_1_1_fu_891_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_window_1_1_1_reg_1556 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_weight_2_0_2_i_fu_927_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_weight_2_0_2_i_reg_1562 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_weight_2_1_2_i_fu_943_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_weight_2_1_2_i_reg_1567 : STD_LOGIC_VECTOR (9 downto 0);
    signal x_weight_2_2_2_i_fu_1045_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal x_weight_2_2_2_i_reg_1572 : STD_LOGIC_VECTOR (10 downto 0);
    signal y_weight_2_2_2_i_fu_1051_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal y_weight_2_2_2_i_reg_1577 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_28_fu_1057_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_reg_1582 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_fu_1061_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_reg_1588 : STD_LOGIC_VECTOR (7 downto 0);
    signal edge_weight_i_fu_1115_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal edge_weight_i_reg_1594 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_edge_weight_i_reg_1594_pp0_it8 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_i_fu_1143_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_i_reg_1606 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_i_fu_1148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_i_reg_1612 : STD_LOGIC_VECTOR (0 downto 0);
    signal B_cast_i_reg_1617 : STD_LOGIC_VECTOR (8 downto 0);
    signal sepia_val_0_reg_1623 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_sepia_val_0_reg_1623_pp0_it9 : STD_LOGIC_VECTOR (7 downto 0);
    signal edge_val_1_fu_1195_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sepia_val_2_fu_1225_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sepia_val_2_reg_1633 : STD_LOGIC_VECTOR (7 downto 0);
    signal sepia_val_1_fu_1245_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sepia_val_1_reg_1638 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buffer_0_0_val_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_0_0_val_ce0 : STD_LOGIC;
    signal line_buffer_0_0_val_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_0_0_val_ce1 : STD_LOGIC;
    signal line_buffer_0_0_val_we1 : STD_LOGIC;
    signal line_buffer_0_0_val_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buffer_0_1_val_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_0_1_val_ce0 : STD_LOGIC;
    signal line_buffer_0_1_val_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_0_1_val_ce1 : STD_LOGIC;
    signal line_buffer_0_1_val_we1 : STD_LOGIC;
    signal line_buffer_0_1_val_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buffer_0_2_val_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_0_2_val_ce0 : STD_LOGIC;
    signal line_buffer_0_2_val_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_0_2_val_ce1 : STD_LOGIC;
    signal line_buffer_0_2_val_we1 : STD_LOGIC;
    signal line_buffer_0_2_val_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buffer_1_0_val_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_1_0_val_ce0 : STD_LOGIC;
    signal line_buffer_1_0_val_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_1_0_val_ce1 : STD_LOGIC;
    signal line_buffer_1_0_val_we1 : STD_LOGIC;
    signal line_buffer_1_0_val_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buffer_1_1_val_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_1_1_val_ce0 : STD_LOGIC;
    signal line_buffer_1_1_val_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_1_1_val_ce1 : STD_LOGIC;
    signal line_buffer_1_1_val_we1 : STD_LOGIC;
    signal line_buffer_1_1_val_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buffer_1_2_val_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_1_2_val_ce0 : STD_LOGIC;
    signal line_buffer_1_2_val_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buffer_1_2_val_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_1_2_val_ce1 : STD_LOGIC;
    signal line_buffer_1_2_val_we1 : STD_LOGIC;
    signal line_buffer_1_2_val_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_reg_346 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_429 : BOOLEAN;
    signal ap_reg_phiprechg_edge_val1_reg_368pp0_it9 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_phiprechg_edge_val1_reg_368pp0_it10 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_phiprechg_edge_val1_reg_368pp0_it1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_phiprechg_edge_val1_reg_368pp0_it2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_phiprechg_edge_val1_reg_368pp0_it3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_phiprechg_edge_val1_reg_368pp0_it4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_phiprechg_edge_val1_reg_368pp0_it5 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_phiprechg_edge_val1_reg_368pp0_it6 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_phiprechg_edge_val1_reg_368pp0_it7 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_phiprechg_edge_val1_reg_368pp0_it8 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_496_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal B_2_fu_152 : STD_LOGIC_VECTOR (7 downto 0);
    signal G_2_fu_156 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_window_0_1_fu_160 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_window_0_1_1_fu_896_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_window_0_2_fu_164 : STD_LOGIC_VECTOR (7 downto 0);
    signal R_2_fu_168 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_window_1_1_fu_172 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_window_1_2_fu_176 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_window_2_2_fu_180 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_window_2_1_fu_184 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_380_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_fu_384_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_fu_394_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_8_fu_398_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal row_cast_fu_428_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal output_row_fu_448_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal col_cast_fu_482_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_14_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_col_fu_506_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_17_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_563_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_563_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl2_i_fu_585_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl2_cast_i_cast_fu_593_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_606_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_606_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_616_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_616_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl1_i_fu_622_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl_i_fu_636_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp55_cast_fu_647_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl1_cast_i_fu_629_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_6_i_fu_650_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl_cast_i_fu_643_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_cast_i_fu_656_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_563_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_2_cast3_i_cast_fu_633_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp3_fu_666_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp57_cast_fu_672_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_fu_660_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_i_fu_676_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_8_i_fu_676_p2 : signal is "no";
    signal p_shl2_i6_fu_692_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl2_cast_i7_cast_fu_699_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl1_i1_fu_709_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl2_i1_fu_720_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl2_cast_i29_cast_fu_727_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp7_fu_731_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp61_cast_fu_737_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl1_cast_i1_fu_716_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl1_i4_fu_755_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl_i1_fu_769_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp58_cast_fu_780_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl1_cast_i5_fu_762_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_6_i1_fu_783_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl_cast_i1_fu_776_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_cast_i1_fu_789_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_606_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_2_cast3_i9_cast_fu_766_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp6_fu_799_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp60_cast_fu_805_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5_fu_793_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_i1_fu_809_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp_8_i1_fu_809_p2 : signal is "no";
    signal p_shl_i2_fu_828_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl_cast_i2_fu_835_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_cast_i2_fu_839_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_616_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_2_cast3_i31_cast_fu_825_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp9_fu_848_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp63_cast_fu_854_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp8_fu_842_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_i2_fu_858_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp_8_i2_fu_858_p2 : signal is "no";
    signal tmp_cast_i_fu_877_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_cast_i2_fu_874_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_23_0_1_i_fu_911_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_19_0_2_cast8_i_cast_fu_923_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_19_0_cast9_i_cast_fu_907_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp12_fu_933_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp66_cast_fu_939_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_23_0_1_cast_i_fu_919_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl8_i_fu_971_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_weight_2_0_2_cast_i_fu_968_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl8_cast_i_fu_978_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_21_1_2_i_fu_988_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_weight_2_1_1_i_fu_982_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_21_1_2_cast_i_fu_996_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal x_weight_2_1_2_i_fu_1000_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_19_2_cast_i_fu_1009_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal y_weight_2_1_2_cast_i_fu_1006_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_i3_fu_1024_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_weight_2_2_i_fu_1018_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_i3_fu_1031_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal x_weight_2_2_i_fu_1012_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_19_2_2_cast_i_fu_1041_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal y_weight_2_2_1_i_fu_1035_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_29_fu_1081_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_1086_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_i_fu_1098_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_1103_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_fu_1108_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_23_fu_1091_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_cast_i3_fu_1124_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_cast_i_fu_1121_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_i_fu_1127_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1137_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1137_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1137_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal not_tmp_15_i_fu_1178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_1191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_i_cast_fu_1183_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal edge_val_fu_1173_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal R_3_fu_1203_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_30_fu_1213_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_1221_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal G_3_fu_1208_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_32_fu_1233_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_1241_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_563_ce : STD_LOGIC;
    signal grp_fu_606_ce : STD_LOGIC;
    signal grp_fu_616_ce : STD_LOGIC;
    signal grp_fu_1137_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1137_p00 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_563_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_606_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_616_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_bdd_349 : BOOLEAN;
    signal ap_sig_bdd_436 : BOOLEAN;
    signal ap_sig_bdd_459 : BOOLEAN;
    signal ap_sig_bdd_444 : BOOLEAN;

    component image_filter_mul_8ns_6ns_13_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component image_filter_mul_10ns_12ns_22_2 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component image_filter_Loop_1_proc_line_buffer_0_0_val IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    line_buffer_0_0_val_U : component image_filter_Loop_1_proc_line_buffer_0_0_val
    generic map (
        DataWidth => 8,
        AddressRange => 1921,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_0_0_val_address0,
        ce0 => line_buffer_0_0_val_ce0,
        q0 => line_buffer_0_0_val_q0,
        address1 => line_buffer_0_0_val_address1,
        ce1 => line_buffer_0_0_val_ce1,
        we1 => line_buffer_0_0_val_we1,
        d1 => line_buffer_0_0_val_d1);

    line_buffer_0_1_val_U : component image_filter_Loop_1_proc_line_buffer_0_0_val
    generic map (
        DataWidth => 8,
        AddressRange => 1921,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_0_1_val_address0,
        ce0 => line_buffer_0_1_val_ce0,
        q0 => line_buffer_0_1_val_q0,
        address1 => line_buffer_0_1_val_address1,
        ce1 => line_buffer_0_1_val_ce1,
        we1 => line_buffer_0_1_val_we1,
        d1 => line_buffer_0_1_val_d1);

    line_buffer_0_2_val_U : component image_filter_Loop_1_proc_line_buffer_0_0_val
    generic map (
        DataWidth => 8,
        AddressRange => 1921,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_0_2_val_address0,
        ce0 => line_buffer_0_2_val_ce0,
        q0 => line_buffer_0_2_val_q0,
        address1 => line_buffer_0_2_val_address1,
        ce1 => line_buffer_0_2_val_ce1,
        we1 => line_buffer_0_2_val_we1,
        d1 => line_buffer_0_2_val_d1);

    line_buffer_1_0_val_U : component image_filter_Loop_1_proc_line_buffer_0_0_val
    generic map (
        DataWidth => 8,
        AddressRange => 1921,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_1_0_val_address0,
        ce0 => line_buffer_1_0_val_ce0,
        q0 => line_buffer_1_0_val_q0,
        address1 => line_buffer_1_0_val_address1,
        ce1 => line_buffer_1_0_val_ce1,
        we1 => line_buffer_1_0_val_we1,
        d1 => line_buffer_1_0_val_d1);

    line_buffer_1_1_val_U : component image_filter_Loop_1_proc_line_buffer_0_0_val
    generic map (
        DataWidth => 8,
        AddressRange => 1921,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_1_1_val_address0,
        ce0 => line_buffer_1_1_val_ce0,
        q0 => line_buffer_1_1_val_q0,
        address1 => line_buffer_1_1_val_address1,
        ce1 => line_buffer_1_1_val_ce1,
        we1 => line_buffer_1_1_val_we1,
        d1 => line_buffer_1_1_val_d1);

    line_buffer_1_2_val_U : component image_filter_Loop_1_proc_line_buffer_0_0_val
    generic map (
        DataWidth => 8,
        AddressRange => 1921,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_1_2_val_address0,
        ce0 => line_buffer_1_2_val_ce0,
        q0 => line_buffer_1_2_val_q0,
        address1 => line_buffer_1_2_val_address1,
        ce1 => line_buffer_1_2_val_ce1,
        we1 => line_buffer_1_2_val_we1,
        d1 => line_buffer_1_2_val_d1);

    image_filter_mul_8ns_6ns_13_3_U15 : component image_filter_mul_8ns_6ns_13_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 6,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_563_p0,
        din1 => grp_fu_563_p1,
        ce => grp_fu_563_ce,
        dout => grp_fu_563_p2);

    image_filter_mul_8ns_6ns_13_3_U16 : component image_filter_mul_8ns_6ns_13_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 6,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_606_p0,
        din1 => grp_fu_606_p1,
        ce => grp_fu_606_ce,
        dout => grp_fu_606_p2);

    image_filter_mul_8ns_6ns_13_3_U17 : component image_filter_mul_8ns_6ns_13_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 6,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_616_p0,
        din1 => grp_fu_616_p1,
        ce => grp_fu_616_ce,
        dout => grp_fu_616_p2);

    image_filter_mul_10ns_12ns_22_2_U18 : component image_filter_mul_10ns_12ns_22_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 10,
        din1_WIDTH => 12,
        dout_WIDTH => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1137_p0,
        din1 => grp_fu_1137_p1,
        ce => grp_fu_1137_ce,
        dout => grp_fu_1137_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_432_p2 = ap_const_lv1_0)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))) and not((ap_const_lv1_0 = exitcond_fu_471_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_432_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_432_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it10 assign process. --
    ap_reg_ppiten_pp0_it10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it10 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10))))) then 
                    ap_reg_ppiten_pp0_it10 <= ap_reg_ppiten_pp0_it9;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_432_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it10 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10))))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10))))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10))))) then 
                    ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it5 assign process. --
    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10))))) then
                    if (not((ap_const_logic_1 = ap_reg_ppiten_pp0_it3))) then 
                        ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) then 
                        ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it6 assign process. --
    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10))))) then 
                    ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it7 assign process. --
    ap_reg_ppiten_pp0_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10))))) then 
                    ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it8 assign process. --
    ap_reg_ppiten_pp0_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it8 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10))))) then 
                    ap_reg_ppiten_pp0_it8 <= ap_reg_ppiten_pp0_it7;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it9 assign process. --
    ap_reg_ppiten_pp0_it9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it9 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10))))) then 
                    ap_reg_ppiten_pp0_it9 <= ap_reg_ppiten_pp0_it8;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_phiprechg_edge_val1_reg_368pp0_it10 assign process. --
    ap_reg_phiprechg_edge_val1_reg_368pp0_it10_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_436) then
                if (ap_sig_bdd_349) then 
                    ap_reg_phiprechg_edge_val1_reg_368pp0_it10 <= edge_val_1_fu_1195_p3;
                elsif ((ap_true = ap_true)) then 
                    ap_reg_phiprechg_edge_val1_reg_368pp0_it10 <= ap_reg_phiprechg_edge_val1_reg_368pp0_it9;
                end if;
            end if; 
        end if;
    end process;

    -- ap_reg_phiprechg_edge_val1_reg_368pp0_it2 assign process. --
    ap_reg_phiprechg_edge_val1_reg_368pp0_it2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_444) then
                if (ap_sig_bdd_459) then 
                    ap_reg_phiprechg_edge_val1_reg_368pp0_it2 <= ap_const_lv8_0;
                elsif ((ap_true = ap_true)) then 
                    ap_reg_phiprechg_edge_val1_reg_368pp0_it2 <= ap_reg_phiprechg_edge_val1_reg_368pp0_it1;
                end if;
            end if; 
        end if;
    end process;

    -- col_reg_357 assign process. --
    col_reg_357_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))) and (ap_const_lv1_0 = exitcond_fu_471_p2))) then 
                col_reg_357 <= col_1_fu_476_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_432_p2 = ap_const_lv1_0))) then 
                col_reg_357 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    -- row_reg_346 assign process. --
    row_reg_346_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_3)) then 
                row_reg_346 <= row_1_reg_1360;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_65))) then 
                row_reg_346 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_lv1_0 = exitcond_reg_1385) and not((ap_const_lv1_0 = or_cond_reg_1394)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))))) then
                B_2_fu_152 <= img_0_data_stream_2_V_dout;
                G_2_fu_156 <= img_0_data_stream_1_V_dout;
                R_2_fu_168 <= img_0_data_stream_0_V_dout;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10))))) then
                B_cast_i_reg_1617 <= grp_fu_1137_p2(20 downto 12);
                ap_reg_ppstg_G_5_reg_1463_pp0_it3 <= G_5_reg_1463;
                ap_reg_ppstg_edge_weight_i_reg_1594_pp0_it8 <= edge_weight_i_reg_1594;
                ap_reg_ppstg_exitcond_reg_1385_pp0_it2 <= ap_reg_ppstg_exitcond_reg_1385_pp0_it1;
                ap_reg_ppstg_exitcond_reg_1385_pp0_it3 <= ap_reg_ppstg_exitcond_reg_1385_pp0_it2;
                ap_reg_ppstg_exitcond_reg_1385_pp0_it4 <= ap_reg_ppstg_exitcond_reg_1385_pp0_it3;
                ap_reg_ppstg_exitcond_reg_1385_pp0_it5 <= ap_reg_ppstg_exitcond_reg_1385_pp0_it4;
                ap_reg_ppstg_exitcond_reg_1385_pp0_it6 <= ap_reg_ppstg_exitcond_reg_1385_pp0_it5;
                ap_reg_ppstg_exitcond_reg_1385_pp0_it7 <= ap_reg_ppstg_exitcond_reg_1385_pp0_it6;
                ap_reg_ppstg_exitcond_reg_1385_pp0_it8 <= ap_reg_ppstg_exitcond_reg_1385_pp0_it7;
                ap_reg_ppstg_or_cond2_reg_1444_pp0_it2 <= ap_reg_ppstg_or_cond2_reg_1444_pp0_it1;
                ap_reg_ppstg_or_cond2_reg_1444_pp0_it3 <= ap_reg_ppstg_or_cond2_reg_1444_pp0_it2;
                ap_reg_ppstg_or_cond2_reg_1444_pp0_it4 <= ap_reg_ppstg_or_cond2_reg_1444_pp0_it3;
                ap_reg_ppstg_or_cond2_reg_1444_pp0_it5 <= ap_reg_ppstg_or_cond2_reg_1444_pp0_it4;
                ap_reg_ppstg_or_cond2_reg_1444_pp0_it6 <= ap_reg_ppstg_or_cond2_reg_1444_pp0_it5;
                ap_reg_ppstg_or_cond2_reg_1444_pp0_it7 <= ap_reg_ppstg_or_cond2_reg_1444_pp0_it6;
                ap_reg_ppstg_or_cond2_reg_1444_pp0_it8 <= ap_reg_ppstg_or_cond2_reg_1444_pp0_it7;
                ap_reg_ppstg_or_cond2_reg_1444_pp0_it9 <= ap_reg_ppstg_or_cond2_reg_1444_pp0_it8;
                ap_reg_ppstg_or_cond3_reg_1459_pp0_it2 <= or_cond3_reg_1459;
                ap_reg_ppstg_or_cond3_reg_1459_pp0_it3 <= ap_reg_ppstg_or_cond3_reg_1459_pp0_it2;
                ap_reg_ppstg_or_cond3_reg_1459_pp0_it4 <= ap_reg_ppstg_or_cond3_reg_1459_pp0_it3;
                ap_reg_ppstg_or_cond3_reg_1459_pp0_it5 <= ap_reg_ppstg_or_cond3_reg_1459_pp0_it4;
                ap_reg_ppstg_or_cond3_reg_1459_pp0_it6 <= ap_reg_ppstg_or_cond3_reg_1459_pp0_it5;
                ap_reg_ppstg_or_cond3_reg_1459_pp0_it7 <= ap_reg_ppstg_or_cond3_reg_1459_pp0_it6;
                ap_reg_ppstg_or_cond3_reg_1459_pp0_it8 <= ap_reg_ppstg_or_cond3_reg_1459_pp0_it7;
                ap_reg_ppstg_pix_val_0_reg_1491_pp0_it3 <= pix_val_0_reg_1491;
                ap_reg_ppstg_pix_val_0_reg_1491_pp0_it4 <= ap_reg_ppstg_pix_val_0_reg_1491_pp0_it3;
                ap_reg_ppstg_pix_val_0_reg_1491_pp0_it5 <= ap_reg_ppstg_pix_val_0_reg_1491_pp0_it4;
                ap_reg_ppstg_pix_val_0_reg_1491_pp0_it6 <= ap_reg_ppstg_pix_val_0_reg_1491_pp0_it5;
                ap_reg_ppstg_pix_val_1_reg_1498_pp0_it3 <= pix_val_1_reg_1498;
                ap_reg_ppstg_pix_val_2_reg_1453_pp0_it2 <= pix_val_2_reg_1453;
                ap_reg_ppstg_pix_val_2_reg_1453_pp0_it3 <= ap_reg_ppstg_pix_val_2_reg_1453_pp0_it2;
                ap_reg_ppstg_sepia_val_0_reg_1623_pp0_it9 <= sepia_val_0_reg_1623;
                ap_reg_ppstg_tmp_2_i3_reg_1551_pp0_it5 <= tmp_2_i3_reg_1551;
                ap_reg_ppstg_tmp_2_i3_reg_1551_pp0_it6 <= ap_reg_ppstg_tmp_2_i3_reg_1551_pp0_it5;
                ap_reg_ppstg_y_window_2_1_2_reg_1536_pp0_it5 <= y_window_2_1_2_reg_1536;
                ap_reg_ppstg_y_window_2_2_1_reg_1530_pp0_it5 <= y_window_2_2_1_reg_1530;
                sepia_val_0_reg_1623 <= grp_fu_1137_p2(19 downto 12);
                sepia_val_1_reg_1638 <= sepia_val_1_fu_1245_p3;
                sepia_val_2_reg_1633 <= sepia_val_2_fu_1225_p3;
                y_window_2_2_1_reg_1530 <= y_window_2_1_fu_184;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1385_pp0_it1))) then
                G_5_reg_1463 <= G_2_fu_156;
                G_reg_1480 <= line_buffer_1_1_val_q0;
                R_5_reg_1469 <= R_2_fu_168;
                R_reg_1475 <= line_buffer_1_0_val_q0;
                pix_val_0_reg_1491 <= line_buffer_0_0_val_q0;
                pix_val_1_reg_1498 <= line_buffer_0_1_val_q0;
                tmp1_reg_1486(1) <= tmp1_fu_597_p2(1);
    tmp1_reg_1486(2) <= tmp1_fu_597_p2(2);
    tmp1_reg_1486(3) <= tmp1_fu_597_p2(3);
    tmp1_reg_1486(4) <= tmp1_fu_597_p2(4);
    tmp1_reg_1486(5) <= tmp1_fu_597_p2(5);
    tmp1_reg_1486(6) <= tmp1_fu_597_p2(6);
    tmp1_reg_1486(7) <= tmp1_fu_597_p2(7);
    tmp1_reg_1486(8) <= tmp1_fu_597_p2(8);
    tmp1_reg_1486(9) <= tmp1_fu_597_p2(9);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))))) then
                ap_reg_phiprechg_edge_val1_reg_368pp0_it3 <= ap_reg_phiprechg_edge_val1_reg_368pp0_it2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))))) then
                ap_reg_phiprechg_edge_val1_reg_368pp0_it4 <= ap_reg_phiprechg_edge_val1_reg_368pp0_it3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))))) then
                ap_reg_phiprechg_edge_val1_reg_368pp0_it5 <= ap_reg_phiprechg_edge_val1_reg_368pp0_it4;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))))) then
                ap_reg_phiprechg_edge_val1_reg_368pp0_it6 <= ap_reg_phiprechg_edge_val1_reg_368pp0_it5;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))))) then
                ap_reg_phiprechg_edge_val1_reg_368pp0_it7 <= ap_reg_phiprechg_edge_val1_reg_368pp0_it6;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it7) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))))) then
                ap_reg_phiprechg_edge_val1_reg_368pp0_it8 <= ap_reg_phiprechg_edge_val1_reg_368pp0_it7;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))))) then
                ap_reg_phiprechg_edge_val1_reg_368pp0_it9 <= ap_reg_phiprechg_edge_val1_reg_368pp0_it8;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))))) then
                ap_reg_ppstg_exitcond_reg_1385_pp0_it1 <= exitcond_reg_1385;
                ap_reg_ppstg_line_buffer_0_0_val_addr_reg_1416_pp0_it1 <= line_buffer_0_0_val_addr_reg_1416;
                ap_reg_ppstg_line_buffer_0_1_val_addr_reg_1422_pp0_it1 <= line_buffer_0_1_val_addr_reg_1422;
                ap_reg_ppstg_line_buffer_0_2_val_addr_reg_1428_pp0_it1 <= line_buffer_0_2_val_addr_reg_1428;
                ap_reg_ppstg_line_buffer_1_0_val_addr_reg_1398_pp0_it1 <= line_buffer_1_0_val_addr_reg_1398;
                ap_reg_ppstg_line_buffer_1_1_val_addr_reg_1404_pp0_it1 <= line_buffer_1_1_val_addr_reg_1404;
                ap_reg_ppstg_or_cond2_reg_1444_pp0_it1 <= or_cond2_reg_1444;
                exitcond_reg_1385 <= exitcond_fu_471_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1385_pp0_it6) and (ap_const_lv1_0 = ap_reg_ppstg_or_cond3_reg_1459_pp0_it6))) then
                edge_weight_i_reg_1594 <= edge_weight_i_fu_1115_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))) and (ap_const_lv1_0 = exitcond_fu_471_p2))) then
                line_buffer_0_0_val_addr_reg_1416 <= tmp_16_fu_496_p1(11 - 1 downto 0);
                line_buffer_0_1_val_addr_reg_1422 <= tmp_16_fu_496_p1(11 - 1 downto 0);
                line_buffer_0_2_val_addr_reg_1428 <= tmp_16_fu_496_p1(11 - 1 downto 0);
                line_buffer_1_0_val_addr_reg_1398 <= tmp_16_fu_496_p1(11 - 1 downto 0);
                line_buffer_1_1_val_addr_reg_1404 <= tmp_16_fu_496_p1(11 - 1 downto 0);
                line_buffer_1_2_val_addr_reg_1410 <= tmp_16_fu_496_p1(11 - 1 downto 0);
                or_cond2_reg_1444 <= or_cond2_fu_539_p2;
                or_cond_reg_1394 <= or_cond_fu_491_p2;
                tmp10_reg_1434 <= tmp10_fu_523_p2;
                tmp11_reg_1439 <= tmp11_fu_528_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_lv1_0 = exitcond_reg_1385) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))))) then
                or_cond3_reg_1459 <= or_cond3_fu_569_p2;
                pix_val_2_reg_1453 <= line_buffer_0_2_val_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                row_1_reg_1360 <= row_1_fu_437_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1385_pp0_it2))) then
                tmp4_reg_1520(1) <= tmp4_fu_703_p2(1);
    tmp4_reg_1520(2) <= tmp4_fu_703_p2(2);
    tmp4_reg_1520(3) <= tmp4_fu_703_p2(3);
    tmp4_reg_1520(4) <= tmp4_fu_703_p2(4);
    tmp4_reg_1520(5) <= tmp4_fu_703_p2(5);
    tmp4_reg_1520(6) <= tmp4_fu_703_p2(6);
    tmp4_reg_1520(7) <= tmp4_fu_703_p2(7);
    tmp4_reg_1520(8) <= tmp4_fu_703_p2(8);
    tmp4_reg_1520(9) <= tmp4_fu_703_p2(9);
                tmp_6_i2_reg_1525(1) <= tmp_6_i2_fu_741_p2(1);
    tmp_6_i2_reg_1525(2) <= tmp_6_i2_fu_741_p2(2);
    tmp_6_i2_reg_1525(3) <= tmp_6_i2_fu_741_p2(3);
    tmp_6_i2_reg_1525(4) <= tmp_6_i2_fu_741_p2(4);
    tmp_6_i2_reg_1525(5) <= tmp_6_i2_fu_741_p2(5);
    tmp_6_i2_reg_1525(6) <= tmp_6_i2_fu_741_p2(6);
    tmp_6_i2_reg_1525(7) <= tmp_6_i2_fu_741_p2(7);
    tmp_6_i2_reg_1525(8) <= tmp_6_i2_fu_741_p2(8);
    tmp_6_i2_reg_1525(9) <= tmp_6_i2_fu_741_p2(9);
    tmp_6_i2_reg_1525(10) <= tmp_6_i2_fu_741_p2(10);
    tmp_6_i2_reg_1525(11) <= tmp_6_i2_fu_741_p2(11);
    tmp_6_i2_reg_1525(12) <= tmp_6_i2_fu_741_p2(12);
    tmp_6_i2_reg_1525(13) <= tmp_6_i2_fu_741_p2(13);
    tmp_6_i2_reg_1525(14) <= tmp_6_i2_fu_741_p2(14);
                tmp_i_reg_1515 <= tmp_8_i_fu_676_p2(15 downto 8);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_432_p2 = ap_const_lv1_0))) then
                tmp_11_reg_1365 <= tmp_11_fu_443_p2;
                tmp_12_reg_1370 <= tmp_12_fu_454_p2;
                tmp_13_reg_1375 <= tmp_13_fu_460_p2;
                tmp_s_reg_1380 <= tmp_s_fu_466_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1385_pp0_it7) and (ap_const_lv1_0 = ap_reg_ppstg_or_cond3_reg_1459_pp0_it7))) then
                tmp_15_i_reg_1606 <= tmp_15_i_fu_1143_p2;
                tmp_17_i_reg_1612 <= tmp_17_i_fu_1148_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1385_pp0_it5) and (ap_const_lv1_0 = ap_reg_ppstg_or_cond3_reg_1459_pp0_it5))) then
                tmp_28_reg_1582 <= tmp_28_fu_1057_p1;
                tmp_29_reg_1588 <= tmp_29_fu_1061_p1;
                x_weight_2_2_2_i_reg_1572 <= x_weight_2_2_2_i_fu_1045_p2;
                y_weight_2_2_2_i_reg_1577 <= y_weight_2_2_2_i_fu_1051_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1385_pp0_it3))) then
                tmp_2_i3_reg_1551 <= tmp_2_i3_fu_880_p2;
                tmp_i1_reg_1541 <= tmp_8_i1_fu_809_p2(15 downto 8);
                tmp_i2_reg_1546 <= tmp_8_i2_fu_858_p2(15 downto 8);
                y_window_2_1_2_reg_1536 <= y_window_2_1_2_fu_750_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1385_pp0_it4) and (ap_const_lv1_0 = ap_reg_ppstg_or_cond3_reg_1459_pp0_it4))) then
                x_weight_2_0_2_i_reg_1562 <= x_weight_2_0_2_i_fu_927_p2;
                y_weight_2_1_2_i_reg_1567 <= y_weight_2_1_2_i_fu_943_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1385_pp0_it4))) then
                y_window_0_1_fu_160 <= y_window_0_1_1_fu_896_p2;
                y_window_0_2_fu_164 <= y_window_0_1_fu_160;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1385_pp0_it4))) then
                y_window_1_1_1_reg_1556 <= y_window_1_1_1_fu_891_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1385_pp0_it5))) then
                y_window_1_1_fu_172 <= y_window_1_1_1_reg_1556;
                y_window_1_2_fu_176 <= y_window_1_1_fu_172;
                y_window_2_2_fu_180 <= ap_reg_ppstg_y_window_2_2_1_reg_1530_pp0_it5;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1385_pp0_it3))) then
                y_window_2_1_fu_184 <= y_window_2_1_2_fu_750_p2;
            end if;
        end if;
    end process;
    tmp1_reg_1486(0) <= '0';
    tmp4_reg_1520(0) <= '0';
    tmp_6_i2_reg_1525(0) <= '0';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_sig_bdd_65, exitcond1_fu_432_p2, ap_sig_bdd_124, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it4, ap_reg_ppiten_pp0_it5, ap_reg_ppiten_pp0_it9, ap_sig_bdd_156, ap_reg_ppiten_pp0_it10)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_65)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond1_fu_432_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                end if;
            when ap_ST_pp0_stg0_fsm_2 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it10) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it9)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it10) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it9))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it5))))) then
                    ap_NS_fsm <= ap_ST_st14_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                end if;
            when ap_ST_st14_fsm_3 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    G_3_fu_1208_p2 <= std_logic_vector(unsigned(B_cast_i_reg_1617) + unsigned(ap_const_lv9_22));
    R_3_fu_1203_p2 <= std_logic_vector(unsigned(B_cast_i_reg_1617) + unsigned(ap_const_lv9_3C));

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, exitcond1_fu_432_p2, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_432_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(exitcond1_fu_432_p2, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_432_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_reg_phiprechg_edge_val1_reg_368pp0_it1 <= "XXXXXXXX";

    -- ap_sig_bdd_107 assign process. --
    ap_sig_bdd_107_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_107 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_124 assign process. --
    ap_sig_bdd_124_assign_proc : process(img_0_data_stream_0_V_empty_n, img_0_data_stream_1_V_empty_n, img_0_data_stream_2_V_empty_n, exitcond_reg_1385, or_cond_reg_1394)
    begin
                ap_sig_bdd_124 <= (((img_0_data_stream_0_V_empty_n = ap_const_logic_0) and (ap_const_lv1_0 = exitcond_reg_1385) and not((ap_const_lv1_0 = or_cond_reg_1394))) or ((ap_const_lv1_0 = exitcond_reg_1385) and not((ap_const_lv1_0 = or_cond_reg_1394)) and (img_0_data_stream_1_V_empty_n = ap_const_logic_0)) or ((ap_const_lv1_0 = exitcond_reg_1385) and not((ap_const_lv1_0 = or_cond_reg_1394)) and (img_0_data_stream_2_V_empty_n = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_156 assign process. --
    ap_sig_bdd_156_assign_proc : process(img_1_data_stream_0_V_full_n, img_1_data_stream_1_V_full_n, img_1_data_stream_2_V_full_n, ap_reg_ppstg_or_cond2_reg_1444_pp0_it9)
    begin
                ap_sig_bdd_156 <= (((img_1_data_stream_0_V_full_n = ap_const_logic_0) and not((ap_const_lv1_0 = ap_reg_ppstg_or_cond2_reg_1444_pp0_it9))) or (not((ap_const_lv1_0 = ap_reg_ppstg_or_cond2_reg_1444_pp0_it9)) and (img_1_data_stream_1_V_full_n = ap_const_logic_0)) or (not((ap_const_lv1_0 = ap_reg_ppstg_or_cond2_reg_1444_pp0_it9)) and (img_1_data_stream_2_V_full_n = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_23 assign process. --
    ap_sig_bdd_23_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_23 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_349 assign process. --
    ap_sig_bdd_349_assign_proc : process(ap_reg_ppstg_exitcond_reg_1385_pp0_it8, ap_reg_ppstg_or_cond3_reg_1459_pp0_it8)
    begin
                ap_sig_bdd_349 <= ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1385_pp0_it8) and (ap_const_lv1_0 = ap_reg_ppstg_or_cond3_reg_1459_pp0_it8));
    end process;


    -- ap_sig_bdd_429 assign process. --
    ap_sig_bdd_429_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_429 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_436 assign process. --
    ap_sig_bdd_436_assign_proc : process(ap_sig_bdd_124, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it9, ap_sig_bdd_156, ap_reg_ppiten_pp0_it10)
    begin
                ap_sig_bdd_436 <= ((ap_const_logic_1 = ap_reg_ppiten_pp0_it9) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))));
    end process;


    -- ap_sig_bdd_444 assign process. --
    ap_sig_bdd_444_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_sig_bdd_124, ap_reg_ppiten_pp0_it1, ap_sig_bdd_156, ap_reg_ppiten_pp0_it10)
    begin
                ap_sig_bdd_444 <= ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))));
    end process;


    -- ap_sig_bdd_459 assign process. --
    ap_sig_bdd_459_assign_proc : process(exitcond_reg_1385, or_cond3_fu_569_p2)
    begin
                ap_sig_bdd_459 <= ((ap_const_lv1_0 = exitcond_reg_1385) and not((ap_const_lv1_0 = or_cond3_fu_569_p2)));
    end process;


    -- ap_sig_bdd_65 assign process. --
    ap_sig_bdd_65_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_65 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_85 assign process. --
    ap_sig_bdd_85_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_85 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_2 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_2_assign_proc : process(ap_sig_bdd_107)
    begin
        if (ap_sig_bdd_107) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_3 assign process. --
    ap_sig_cseq_ST_st14_fsm_3_assign_proc : process(ap_sig_bdd_429)
    begin
        if (ap_sig_bdd_429) then 
            ap_sig_cseq_ST_st14_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_23)
    begin
        if (ap_sig_bdd_23) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_85)
    begin
        if (ap_sig_bdd_85) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;

    col_1_fu_476_p2 <= std_logic_vector(unsigned(col_reg_357) + unsigned(ap_const_lv11_1));
    col_cast_fu_482_p1 <= std_logic_vector(resize(unsigned(col_reg_357),12));
    edge_val_1_fu_1195_p3 <= 
        p_i_cast_fu_1183_p3 when (tmp_27_fu_1191_p2(0) = '1') else 
        edge_val_fu_1173_p2;
    edge_val_fu_1173_p2 <= (ap_reg_ppstg_edge_weight_i_reg_1594_pp0_it8 xor ap_const_lv8_FF);
    edge_weight_i_fu_1115_p2 <= std_logic_vector(unsigned(tmp_26_fu_1108_p3) + unsigned(tmp_23_fu_1091_p3));
    exitcond1_fu_432_p2 <= "1" when (row_reg_346 = tmp_10_fu_414_p2) else "0";
    exitcond_fu_471_p2 <= "1" when (col_reg_357 = tmp_9_fu_408_p2) else "0";

    -- grp_fu_1137_ce assign process. --
    grp_fu_1137_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_sig_bdd_124, ap_reg_ppiten_pp0_it1, ap_sig_bdd_156, ap_reg_ppiten_pp0_it10)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))))) then 
            grp_fu_1137_ce <= ap_const_logic_1;
        else 
            grp_fu_1137_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1137_p0 <= grp_fu_1137_p00(10 - 1 downto 0);
    grp_fu_1137_p00 <= std_logic_vector(resize(unsigned(tmp_3_i_fu_1127_p2),22));
    grp_fu_1137_p1 <= ap_const_lv22_556(12 - 1 downto 0);

    -- grp_fu_563_ce assign process. --
    grp_fu_563_ce_assign_proc : process(exitcond_reg_1385, ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_sig_bdd_124, ap_reg_ppiten_pp0_it1, ap_sig_bdd_156, ap_reg_ppiten_pp0_it10, ap_reg_ppstg_exitcond_reg_1385_pp0_it1, ap_reg_ppstg_exitcond_reg_1385_pp0_it2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))) and ((ap_const_lv1_0 = exitcond_reg_1385) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1385_pp0_it1) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1385_pp0_it2)))) then 
            grp_fu_563_ce <= ap_const_logic_1;
        else 
            grp_fu_563_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_563_p0 <= grp_fu_563_p00(8 - 1 downto 0);
    grp_fu_563_p00 <= std_logic_vector(resize(unsigned(line_buffer_1_2_val_q0),13));
    grp_fu_563_p1 <= ap_const_lv13_19(6 - 1 downto 0);

    -- grp_fu_606_ce assign process. --
    grp_fu_606_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_sig_bdd_124, ap_reg_ppiten_pp0_it1, ap_sig_bdd_156, ap_reg_ppiten_pp0_it10, ap_reg_ppstg_exitcond_reg_1385_pp0_it1, ap_reg_ppstg_exitcond_reg_1385_pp0_it2, ap_reg_ppstg_exitcond_reg_1385_pp0_it3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))) and ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1385_pp0_it1) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1385_pp0_it2) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1385_pp0_it3)))) then 
            grp_fu_606_ce <= ap_const_logic_1;
        else 
            grp_fu_606_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_606_p0 <= grp_fu_606_p00(8 - 1 downto 0);
    grp_fu_606_p00 <= std_logic_vector(resize(unsigned(pix_val_2_reg_1453),13));
    grp_fu_606_p1 <= ap_const_lv13_19(6 - 1 downto 0);

    -- grp_fu_616_ce assign process. --
    grp_fu_616_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_sig_bdd_124, ap_reg_ppiten_pp0_it1, ap_sig_bdd_156, ap_reg_ppiten_pp0_it10, ap_reg_ppstg_exitcond_reg_1385_pp0_it1, ap_reg_ppstg_exitcond_reg_1385_pp0_it2, ap_reg_ppstg_exitcond_reg_1385_pp0_it3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))) and ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1385_pp0_it1) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1385_pp0_it2) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1385_pp0_it3)))) then 
            grp_fu_616_ce <= ap_const_logic_1;
        else 
            grp_fu_616_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_616_p0 <= grp_fu_616_p00(8 - 1 downto 0);
    grp_fu_616_p00 <= std_logic_vector(resize(unsigned(B_2_fu_152),13));
    grp_fu_616_p1 <= ap_const_lv13_19(6 - 1 downto 0);

    -- img_0_data_stream_0_V_read assign process. --
    img_0_data_stream_0_V_read_assign_proc : process(exitcond_reg_1385, ap_sig_cseq_ST_pp0_stg0_fsm_2, or_cond_reg_1394, ap_sig_bdd_124, ap_reg_ppiten_pp0_it1, ap_sig_bdd_156, ap_reg_ppiten_pp0_it10)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_lv1_0 = exitcond_reg_1385) and not((ap_const_lv1_0 = or_cond_reg_1394)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))))) then 
            img_0_data_stream_0_V_read <= ap_const_logic_1;
        else 
            img_0_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- img_0_data_stream_1_V_read assign process. --
    img_0_data_stream_1_V_read_assign_proc : process(exitcond_reg_1385, ap_sig_cseq_ST_pp0_stg0_fsm_2, or_cond_reg_1394, ap_sig_bdd_124, ap_reg_ppiten_pp0_it1, ap_sig_bdd_156, ap_reg_ppiten_pp0_it10)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_lv1_0 = exitcond_reg_1385) and not((ap_const_lv1_0 = or_cond_reg_1394)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))))) then 
            img_0_data_stream_1_V_read <= ap_const_logic_1;
        else 
            img_0_data_stream_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- img_0_data_stream_2_V_read assign process. --
    img_0_data_stream_2_V_read_assign_proc : process(exitcond_reg_1385, ap_sig_cseq_ST_pp0_stg0_fsm_2, or_cond_reg_1394, ap_sig_bdd_124, ap_reg_ppiten_pp0_it1, ap_sig_bdd_156, ap_reg_ppiten_pp0_it10)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_lv1_0 = exitcond_reg_1385) and not((ap_const_lv1_0 = or_cond_reg_1394)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))))) then 
            img_0_data_stream_2_V_read <= ap_const_logic_1;
        else 
            img_0_data_stream_2_V_read <= ap_const_logic_0;
        end if; 
    end process;

    img_1_data_stream_0_V_din <= std_logic_vector(unsigned(ap_reg_ppstg_sepia_val_0_reg_1623_pp0_it9) + unsigned(ap_reg_phiprechg_edge_val1_reg_368pp0_it10));

    -- img_1_data_stream_0_V_write assign process. --
    img_1_data_stream_0_V_write_assign_proc : process(ap_sig_bdd_124, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_or_cond2_reg_1444_pp0_it9, ap_sig_bdd_156, ap_reg_ppiten_pp0_it10)
    begin
        if ((not((ap_const_lv1_0 = ap_reg_ppstg_or_cond2_reg_1444_pp0_it9)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))))) then 
            img_1_data_stream_0_V_write <= ap_const_logic_1;
        else 
            img_1_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;

    img_1_data_stream_1_V_din <= std_logic_vector(unsigned(sepia_val_1_reg_1638) + unsigned(ap_reg_phiprechg_edge_val1_reg_368pp0_it10));

    -- img_1_data_stream_1_V_write assign process. --
    img_1_data_stream_1_V_write_assign_proc : process(ap_sig_bdd_124, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_or_cond2_reg_1444_pp0_it9, ap_sig_bdd_156, ap_reg_ppiten_pp0_it10)
    begin
        if ((not((ap_const_lv1_0 = ap_reg_ppstg_or_cond2_reg_1444_pp0_it9)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))))) then 
            img_1_data_stream_1_V_write <= ap_const_logic_1;
        else 
            img_1_data_stream_1_V_write <= ap_const_logic_0;
        end if; 
    end process;

    img_1_data_stream_2_V_din <= std_logic_vector(unsigned(sepia_val_2_reg_1633) + unsigned(ap_reg_phiprechg_edge_val1_reg_368pp0_it10));

    -- img_1_data_stream_2_V_write assign process. --
    img_1_data_stream_2_V_write_assign_proc : process(ap_sig_bdd_124, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_or_cond2_reg_1444_pp0_it9, ap_sig_bdd_156, ap_reg_ppiten_pp0_it10)
    begin
        if ((not((ap_const_lv1_0 = ap_reg_ppstg_or_cond2_reg_1444_pp0_it9)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))))) then 
            img_1_data_stream_2_V_write <= ap_const_logic_1;
        else 
            img_1_data_stream_2_V_write <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_0_0_val_address0 <= line_buffer_0_0_val_addr_reg_1416;
    line_buffer_0_0_val_address1 <= ap_reg_ppstg_line_buffer_0_0_val_addr_reg_1416_pp0_it1;

    -- line_buffer_0_0_val_ce0 assign process. --
    line_buffer_0_0_val_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_sig_bdd_124, ap_reg_ppiten_pp0_it1, ap_sig_bdd_156, ap_reg_ppiten_pp0_it10)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))))) then 
            line_buffer_0_0_val_ce0 <= ap_const_logic_1;
        else 
            line_buffer_0_0_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- line_buffer_0_0_val_ce1 assign process. --
    line_buffer_0_0_val_ce1_assign_proc : process(ap_sig_bdd_124, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_bdd_156, ap_reg_ppiten_pp0_it10)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))))) then 
            line_buffer_0_0_val_ce1 <= ap_const_logic_1;
        else 
            line_buffer_0_0_val_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_0_0_val_d1 <= R_2_fu_168;

    -- line_buffer_0_0_val_we1 assign process. --
    line_buffer_0_0_val_we1_assign_proc : process(ap_sig_bdd_124, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_bdd_156, ap_reg_ppiten_pp0_it10, ap_reg_ppstg_exitcond_reg_1385_pp0_it1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1385_pp0_it1)))) then 
            line_buffer_0_0_val_we1 <= ap_const_logic_1;
        else 
            line_buffer_0_0_val_we1 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_0_1_val_address0 <= line_buffer_0_1_val_addr_reg_1422;
    line_buffer_0_1_val_address1 <= ap_reg_ppstg_line_buffer_0_1_val_addr_reg_1422_pp0_it1;

    -- line_buffer_0_1_val_ce0 assign process. --
    line_buffer_0_1_val_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_sig_bdd_124, ap_reg_ppiten_pp0_it1, ap_sig_bdd_156, ap_reg_ppiten_pp0_it10)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))))) then 
            line_buffer_0_1_val_ce0 <= ap_const_logic_1;
        else 
            line_buffer_0_1_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- line_buffer_0_1_val_ce1 assign process. --
    line_buffer_0_1_val_ce1_assign_proc : process(ap_sig_bdd_124, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_bdd_156, ap_reg_ppiten_pp0_it10)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))))) then 
            line_buffer_0_1_val_ce1 <= ap_const_logic_1;
        else 
            line_buffer_0_1_val_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_0_1_val_d1 <= G_2_fu_156;

    -- line_buffer_0_1_val_we1 assign process. --
    line_buffer_0_1_val_we1_assign_proc : process(ap_sig_bdd_124, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_bdd_156, ap_reg_ppiten_pp0_it10, ap_reg_ppstg_exitcond_reg_1385_pp0_it1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1385_pp0_it1)))) then 
            line_buffer_0_1_val_we1 <= ap_const_logic_1;
        else 
            line_buffer_0_1_val_we1 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_0_2_val_address0 <= tmp_16_fu_496_p1(11 - 1 downto 0);
    line_buffer_0_2_val_address1 <= ap_reg_ppstg_line_buffer_0_2_val_addr_reg_1428_pp0_it1;

    -- line_buffer_0_2_val_ce0 assign process. --
    line_buffer_0_2_val_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it0, ap_sig_bdd_124, ap_reg_ppiten_pp0_it1, ap_sig_bdd_156, ap_reg_ppiten_pp0_it10)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))))) then 
            line_buffer_0_2_val_ce0 <= ap_const_logic_1;
        else 
            line_buffer_0_2_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- line_buffer_0_2_val_ce1 assign process. --
    line_buffer_0_2_val_ce1_assign_proc : process(ap_sig_bdd_124, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_bdd_156, ap_reg_ppiten_pp0_it10)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))))) then 
            line_buffer_0_2_val_ce1 <= ap_const_logic_1;
        else 
            line_buffer_0_2_val_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_0_2_val_d1 <= B_2_fu_152;

    -- line_buffer_0_2_val_we1 assign process. --
    line_buffer_0_2_val_we1_assign_proc : process(ap_sig_bdd_124, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_bdd_156, ap_reg_ppiten_pp0_it10, ap_reg_ppstg_exitcond_reg_1385_pp0_it1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1385_pp0_it1)))) then 
            line_buffer_0_2_val_we1 <= ap_const_logic_1;
        else 
            line_buffer_0_2_val_we1 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_1_0_val_address0 <= line_buffer_1_0_val_addr_reg_1398;
    line_buffer_1_0_val_address1 <= ap_reg_ppstg_line_buffer_1_0_val_addr_reg_1398_pp0_it1;

    -- line_buffer_1_0_val_ce0 assign process. --
    line_buffer_1_0_val_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_sig_bdd_124, ap_reg_ppiten_pp0_it1, ap_sig_bdd_156, ap_reg_ppiten_pp0_it10)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))))) then 
            line_buffer_1_0_val_ce0 <= ap_const_logic_1;
        else 
            line_buffer_1_0_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- line_buffer_1_0_val_ce1 assign process. --
    line_buffer_1_0_val_ce1_assign_proc : process(ap_sig_bdd_124, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_bdd_156, ap_reg_ppiten_pp0_it10)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))))) then 
            line_buffer_1_0_val_ce1 <= ap_const_logic_1;
        else 
            line_buffer_1_0_val_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_1_0_val_d1 <= line_buffer_0_0_val_q0;

    -- line_buffer_1_0_val_we1 assign process. --
    line_buffer_1_0_val_we1_assign_proc : process(ap_sig_bdd_124, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_bdd_156, ap_reg_ppiten_pp0_it10, ap_reg_ppstg_exitcond_reg_1385_pp0_it1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1385_pp0_it1)))) then 
            line_buffer_1_0_val_we1 <= ap_const_logic_1;
        else 
            line_buffer_1_0_val_we1 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_1_1_val_address0 <= line_buffer_1_1_val_addr_reg_1404;
    line_buffer_1_1_val_address1 <= ap_reg_ppstg_line_buffer_1_1_val_addr_reg_1404_pp0_it1;

    -- line_buffer_1_1_val_ce0 assign process. --
    line_buffer_1_1_val_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_sig_bdd_124, ap_reg_ppiten_pp0_it1, ap_sig_bdd_156, ap_reg_ppiten_pp0_it10)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))))) then 
            line_buffer_1_1_val_ce0 <= ap_const_logic_1;
        else 
            line_buffer_1_1_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- line_buffer_1_1_val_ce1 assign process. --
    line_buffer_1_1_val_ce1_assign_proc : process(ap_sig_bdd_124, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_bdd_156, ap_reg_ppiten_pp0_it10)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))))) then 
            line_buffer_1_1_val_ce1 <= ap_const_logic_1;
        else 
            line_buffer_1_1_val_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_1_1_val_d1 <= line_buffer_0_1_val_q0;

    -- line_buffer_1_1_val_we1 assign process. --
    line_buffer_1_1_val_we1_assign_proc : process(ap_sig_bdd_124, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_bdd_156, ap_reg_ppiten_pp0_it10, ap_reg_ppstg_exitcond_reg_1385_pp0_it1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1385_pp0_it1)))) then 
            line_buffer_1_1_val_we1 <= ap_const_logic_1;
        else 
            line_buffer_1_1_val_we1 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_1_2_val_address0 <= tmp_16_fu_496_p1(11 - 1 downto 0);
    line_buffer_1_2_val_address1 <= line_buffer_1_2_val_addr_reg_1410;

    -- line_buffer_1_2_val_ce0 assign process. --
    line_buffer_1_2_val_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it0, ap_sig_bdd_124, ap_reg_ppiten_pp0_it1, ap_sig_bdd_156, ap_reg_ppiten_pp0_it10)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))))) then 
            line_buffer_1_2_val_ce0 <= ap_const_logic_1;
        else 
            line_buffer_1_2_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- line_buffer_1_2_val_ce1 assign process. --
    line_buffer_1_2_val_ce1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_sig_bdd_124, ap_reg_ppiten_pp0_it1, ap_sig_bdd_156, ap_reg_ppiten_pp0_it10)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))))) then 
            line_buffer_1_2_val_ce1 <= ap_const_logic_1;
        else 
            line_buffer_1_2_val_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_1_2_val_d1 <= line_buffer_0_2_val_q0;

    -- line_buffer_1_2_val_we1 assign process. --
    line_buffer_1_2_val_we1_assign_proc : process(exitcond_reg_1385, ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_sig_bdd_124, ap_reg_ppiten_pp0_it1, ap_sig_bdd_156, ap_reg_ppiten_pp0_it10)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_lv1_0 = exitcond_reg_1385) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_124 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_156 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10))))))) then 
            line_buffer_1_2_val_we1 <= ap_const_logic_1;
        else 
            line_buffer_1_2_val_we1 <= ap_const_logic_0;
        end if; 
    end process;

    not_tmp_15_i_fu_1178_p2 <= (tmp_15_i_reg_1606 xor ap_const_lv1_1);
    or_cond2_fu_539_p2 <= (tmp_13_reg_1375 and tmp_19_fu_533_p2);
    or_cond3_fu_569_p2 <= (tmp11_reg_1439 or tmp10_reg_1434);
    or_cond_fu_491_p2 <= (tmp_11_reg_1365 and tmp_14_fu_486_p2);
    output_col_fu_506_p2 <= std_logic_vector(unsigned(col_cast_fu_482_p1) + unsigned(ap_const_lv12_FFF));
    output_row_fu_448_p2 <= std_logic_vector(unsigned(row_cast_fu_428_p1) + unsigned(ap_const_lv12_FFF));
    p_i_cast_fu_1183_p3 <= 
        ap_const_lv8_FF when (not_tmp_15_i_fu_1178_p2(0) = '1') else 
        ap_const_lv8_0;
    p_shl1_cast_i1_fu_716_p1 <= std_logic_vector(resize(unsigned(p_shl1_i1_fu_709_p3),15));
    p_shl1_cast_i5_fu_762_p1 <= std_logic_vector(resize(unsigned(p_shl1_i4_fu_755_p3),15));
    p_shl1_cast_i_fu_629_p1 <= std_logic_vector(resize(unsigned(p_shl1_i_fu_622_p3),15));
    p_shl1_i1_fu_709_p3 <= (R_5_reg_1469 & ap_const_lv6_0);
    p_shl1_i4_fu_755_p3 <= (ap_reg_ppstg_pix_val_0_reg_1491_pp0_it3 & ap_const_lv6_0);
    p_shl1_i_fu_622_p3 <= (R_reg_1475 & ap_const_lv6_0);
    p_shl2_cast_i29_cast_fu_727_p1 <= std_logic_vector(resize(unsigned(p_shl2_i1_fu_720_p3),10));
    p_shl2_cast_i7_cast_fu_699_p1 <= std_logic_vector(resize(unsigned(p_shl2_i6_fu_692_p3),10));
    p_shl2_cast_i_cast_fu_593_p1 <= std_logic_vector(resize(unsigned(p_shl2_i_fu_585_p3),10));
    p_shl2_i1_fu_720_p3 <= (R_5_reg_1469 & ap_const_lv1_0);
    p_shl2_i6_fu_692_p3 <= (pix_val_0_reg_1491 & ap_const_lv1_0);
    p_shl2_i_fu_585_p3 <= (line_buffer_1_0_val_q0 & ap_const_lv1_0);
    p_shl8_cast_i_fu_978_p1 <= std_logic_vector(resize(unsigned(p_shl8_i_fu_971_p3),11));
    p_shl8_i_fu_971_p3 <= (y_window_1_1_1_reg_1556 & ap_const_lv1_0);
    p_shl_cast_i1_fu_776_p1 <= std_logic_vector(resize(unsigned(p_shl_i1_fu_769_p3),16));
    p_shl_cast_i2_fu_835_p1 <= std_logic_vector(resize(unsigned(p_shl_i2_fu_828_p3),16));
    p_shl_cast_i3_fu_1031_p1 <= std_logic_vector(resize(unsigned(p_shl_i3_fu_1024_p3),11));
    p_shl_cast_i_fu_643_p1 <= std_logic_vector(resize(unsigned(p_shl_i_fu_636_p3),16));
    p_shl_i1_fu_769_p3 <= (ap_reg_ppstg_pix_val_1_reg_1498_pp0_it3 & ap_const_lv7_0);
    p_shl_i2_fu_828_p3 <= (ap_reg_ppstg_G_5_reg_1463_pp0_it3 & ap_const_lv7_0);
    p_shl_i3_fu_1024_p3 <= (ap_reg_ppstg_y_window_2_2_1_reg_1530_pp0_it5 & ap_const_lv1_0);
    p_shl_i_fu_636_p3 <= (G_reg_1480 & ap_const_lv7_0);
    row_1_fu_437_p2 <= std_logic_vector(unsigned(row_reg_346) + unsigned(ap_const_lv11_1));
    row_cast_fu_428_p1 <= std_logic_vector(resize(unsigned(row_reg_346),12));
    sepia_val_1_fu_1245_p3 <= 
        ap_const_lv8_FF when (tmp_32_fu_1233_p3(0) = '1') else 
        tmp_33_fu_1241_p1;
    sepia_val_2_fu_1225_p3 <= 
        ap_const_lv8_FF when (tmp_30_fu_1213_p3(0) = '1') else 
        tmp_31_fu_1221_p1;
    tmp10_fu_523_p2 <= (tmp_12_reg_1370 or tmp_17_fu_512_p2);
    tmp11_fu_528_p2 <= (tmp_s_reg_1380 or tmp_18_fu_518_p2);
    tmp12_fu_933_p2 <= std_logic_vector(unsigned(tmp_19_0_cast9_i_cast_fu_907_p1) + unsigned(tmp_19_0_2_cast8_i_cast_fu_923_p1));
    tmp1_fu_597_p2 <= std_logic_vector(unsigned(p_shl2_cast_i_cast_fu_593_p1) + unsigned(ap_const_lv10_80));
    tmp2_fu_660_p2 <= std_logic_vector(unsigned(p_shl_cast_i_fu_643_p1) + unsigned(tmp_6_cast_i_fu_656_p1));
    tmp3_fu_666_p2 <= std_logic_vector(unsigned(grp_fu_563_p2) + unsigned(tmp_2_cast3_i_cast_fu_633_p1));
    tmp4_fu_703_p2 <= std_logic_vector(unsigned(p_shl2_cast_i7_cast_fu_699_p1) + unsigned(ap_const_lv10_80));
    tmp55_cast_fu_647_p1 <= std_logic_vector(resize(unsigned(tmp1_reg_1486),15));
    tmp57_cast_fu_672_p1 <= std_logic_vector(resize(unsigned(tmp3_fu_666_p2),16));
    tmp58_cast_fu_780_p1 <= std_logic_vector(resize(unsigned(tmp4_reg_1520),15));
    tmp5_fu_793_p2 <= std_logic_vector(unsigned(p_shl_cast_i1_fu_776_p1) + unsigned(tmp_6_cast_i1_fu_789_p1));
    tmp60_cast_fu_805_p1 <= std_logic_vector(resize(unsigned(tmp6_fu_799_p2),16));
    tmp61_cast_fu_737_p1 <= std_logic_vector(resize(unsigned(tmp7_fu_731_p2),15));
    tmp63_cast_fu_854_p1 <= std_logic_vector(resize(unsigned(tmp9_fu_848_p2),16));
    tmp66_cast_fu_939_p1 <= std_logic_vector(resize(unsigned(tmp12_fu_933_p2),10));
    tmp6_fu_799_p2 <= std_logic_vector(unsigned(grp_fu_606_p2) + unsigned(tmp_2_cast3_i9_cast_fu_766_p1));
    tmp7_fu_731_p2 <= std_logic_vector(unsigned(p_shl2_cast_i29_cast_fu_727_p1) + unsigned(ap_const_lv10_80));
    tmp8_fu_842_p2 <= std_logic_vector(unsigned(p_shl_cast_i2_fu_835_p1) + unsigned(tmp_6_cast_i2_fu_839_p1));
    tmp9_fu_848_p2 <= std_logic_vector(unsigned(grp_fu_616_p2) + unsigned(tmp_2_cast3_i31_cast_fu_825_p1));
    tmp_10_fu_414_p2 <= std_logic_vector(unsigned(tmp_fu_380_p1) + unsigned(ap_const_lv11_1));
    tmp_11_fu_443_p2 <= "1" when (signed(row_cast_fu_428_p1) < signed(tmp_21_fu_420_p1)) else "0";
    tmp_11_i_fu_1098_p2 <= "1" when (signed(y_weight_2_2_2_i_reg_1577) > signed(ap_const_lv11_0)) else "0";
    tmp_12_fu_454_p2 <= "1" when (output_row_fu_448_p2 = ap_const_lv12_0) else "0";
    tmp_13_fu_460_p2 <= "0" when (row_reg_346 = ap_const_lv11_0) else "1";
    tmp_14_fu_486_p2 <= "1" when (signed(col_cast_fu_482_p1) < signed(tmp_24_fu_424_p1)) else "0";
    tmp_15_cast_fu_390_p1 <= std_logic_vector(resize(unsigned(tmp_7_fu_384_p2),12));
    tmp_15_i_fu_1143_p2 <= "1" when (unsigned(edge_weight_i_reg_1594) < unsigned(ap_const_lv8_37)) else "0";
    tmp_16_cast_fu_404_p1 <= std_logic_vector(resize(unsigned(tmp_8_fu_398_p2),12));
    tmp_16_fu_496_p1 <= std_logic_vector(resize(unsigned(col_reg_357),64));
    tmp_17_fu_512_p2 <= "1" when (output_col_fu_506_p2 = ap_const_lv12_0) else "0";
    tmp_17_i_fu_1148_p2 <= "1" when (unsigned(edge_weight_i_reg_1594) > unsigned(ap_const_lv8_CD)) else "0";
    tmp_18_fu_518_p2 <= "1" when (output_col_fu_506_p2 = tmp_16_cast_fu_404_p1) else "0";
    tmp_19_0_2_cast8_i_cast_fu_923_p1 <= std_logic_vector(resize(unsigned(y_window_0_2_fu_164),9));
    tmp_19_0_cast9_i_cast_fu_907_p1 <= std_logic_vector(resize(unsigned(y_window_0_1_1_fu_896_p2),9));
    tmp_19_2_2_cast_i_fu_1041_p1 <= std_logic_vector(resize(unsigned(y_window_2_2_fu_180),11));
    tmp_19_2_cast_i_fu_1009_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_y_window_2_1_2_reg_1536_pp0_it5),11));
    tmp_19_fu_533_p2 <= "0" when (col_reg_357 = ap_const_lv11_0) else "1";
    tmp_1_cast_i_fu_1121_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_pix_val_0_reg_1491_pp0_it6),10));
    tmp_21_1_2_cast_i_fu_996_p1 <= std_logic_vector(resize(unsigned(tmp_21_1_2_i_fu_988_p3),11));
    tmp_21_1_2_i_fu_988_p3 <= (y_window_1_2_fu_176 & ap_const_lv1_0);
    tmp_21_fu_420_p1 <= rows(12 - 1 downto 0);
    tmp_22_fu_1086_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(tmp_28_reg_1582));
    tmp_23_0_1_cast_i_fu_919_p1 <= std_logic_vector(resize(unsigned(tmp_23_0_1_i_fu_911_p3),10));
    tmp_23_0_1_i_fu_911_p3 <= (y_window_0_1_fu_160 & ap_const_lv1_0);
    tmp_23_fu_1091_p3 <= 
        tmp_28_reg_1582 when (tmp_i_29_fu_1081_p2(0) = '1') else 
        tmp_22_fu_1086_p2;
    tmp_24_fu_424_p1 <= cols(12 - 1 downto 0);
    tmp_25_fu_1103_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(tmp_29_reg_1588));
    tmp_26_fu_1108_p3 <= 
        tmp_29_reg_1588 when (tmp_11_i_fu_1098_p2(0) = '1') else 
        tmp_25_fu_1103_p2;
    tmp_27_fu_1191_p2 <= (tmp_15_i_reg_1606 or tmp_17_i_reg_1612);
    tmp_28_fu_1057_p1 <= x_weight_2_2_2_i_fu_1045_p2(8 - 1 downto 0);
    tmp_29_fu_1061_p1 <= y_weight_2_2_2_i_fu_1051_p2(8 - 1 downto 0);
    tmp_2_cast3_i31_cast_fu_825_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_G_5_reg_1463_pp0_it3),13));
    tmp_2_cast3_i9_cast_fu_766_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_pix_val_1_reg_1498_pp0_it3),13));
    tmp_2_cast3_i_cast_fu_633_p1 <= std_logic_vector(resize(unsigned(G_reg_1480),13));
    tmp_2_cast_i3_fu_1124_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_tmp_2_i3_reg_1551_pp0_it6),10));
    tmp_2_fu_394_p1 <= cols(11 - 1 downto 0);
    tmp_2_i3_fu_880_p2 <= std_logic_vector(unsigned(tmp_cast_i_fu_877_p1) + unsigned(tmp_cast_i2_fu_874_p1));
    tmp_30_fu_1213_p3 <= R_3_fu_1203_p2(8 downto 8);
    tmp_31_fu_1221_p1 <= R_3_fu_1203_p2(8 - 1 downto 0);
    tmp_32_fu_1233_p3 <= G_3_fu_1208_p2(8 downto 8);
    tmp_33_fu_1241_p1 <= G_3_fu_1208_p2(8 - 1 downto 0);
    tmp_3_i_fu_1127_p2 <= std_logic_vector(unsigned(tmp_2_cast_i3_fu_1124_p1) + unsigned(tmp_1_cast_i_fu_1121_p1));
    tmp_6_cast_i1_fu_789_p1 <= std_logic_vector(resize(unsigned(tmp_6_i1_fu_783_p2),16));
    tmp_6_cast_i2_fu_839_p1 <= std_logic_vector(resize(unsigned(tmp_6_i2_reg_1525),16));
    tmp_6_cast_i_fu_656_p1 <= std_logic_vector(resize(unsigned(tmp_6_i_fu_650_p2),16));
    tmp_6_i1_fu_783_p2 <= std_logic_vector(unsigned(tmp58_cast_fu_780_p1) + unsigned(p_shl1_cast_i5_fu_762_p1));
    tmp_6_i2_fu_741_p2 <= std_logic_vector(unsigned(tmp61_cast_fu_737_p1) + unsigned(p_shl1_cast_i1_fu_716_p1));
    tmp_6_i_fu_650_p2 <= std_logic_vector(unsigned(tmp55_cast_fu_647_p1) + unsigned(p_shl1_cast_i_fu_629_p1));
    tmp_7_fu_384_p2 <= std_logic_vector(unsigned(tmp_fu_380_p1) + unsigned(ap_const_lv11_7FF));
    tmp_8_fu_398_p2 <= std_logic_vector(unsigned(tmp_2_fu_394_p1) + unsigned(ap_const_lv11_7FF));
    tmp_8_i1_fu_809_p2 <= std_logic_vector(unsigned(tmp60_cast_fu_805_p1) + unsigned(tmp5_fu_793_p2));
    tmp_8_i2_fu_858_p2 <= std_logic_vector(unsigned(tmp63_cast_fu_854_p1) + unsigned(tmp8_fu_842_p2));
    tmp_8_i_fu_676_p2 <= std_logic_vector(unsigned(tmp57_cast_fu_672_p1) + unsigned(tmp2_fu_660_p2));
    tmp_9_fu_408_p2 <= std_logic_vector(unsigned(tmp_2_fu_394_p1) + unsigned(ap_const_lv11_1));
    tmp_cast_i2_fu_874_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_pix_val_2_reg_1453_pp0_it3),9));
    tmp_cast_i_fu_877_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_pix_val_1_reg_1498_pp0_it3),9));
    tmp_fu_380_p1 <= rows(11 - 1 downto 0);
    tmp_i_29_fu_1081_p2 <= "1" when (signed(x_weight_2_2_2_i_reg_1572) > signed(ap_const_lv11_0)) else "0";
    tmp_s_fu_466_p2 <= "1" when (output_row_fu_448_p2 = tmp_15_cast_fu_390_p1) else "0";
        x_weight_2_0_2_cast_i_fu_968_p1 <= std_logic_vector(resize(signed(x_weight_2_0_2_i_reg_1562),11));

    x_weight_2_0_2_i_fu_927_p2 <= std_logic_vector(unsigned(tmp_19_0_2_cast8_i_cast_fu_923_p1) - unsigned(tmp_19_0_cast9_i_cast_fu_907_p1));
    x_weight_2_1_1_i_fu_982_p2 <= std_logic_vector(signed(x_weight_2_0_2_cast_i_fu_968_p1) - signed(p_shl8_cast_i_fu_978_p1));
    x_weight_2_1_2_i_fu_1000_p2 <= std_logic_vector(signed(x_weight_2_1_1_i_fu_982_p2) + signed(tmp_21_1_2_cast_i_fu_996_p1));
    x_weight_2_2_2_i_fu_1045_p2 <= std_logic_vector(signed(x_weight_2_2_i_fu_1012_p2) + signed(tmp_19_2_2_cast_i_fu_1041_p1));
    x_weight_2_2_i_fu_1012_p2 <= std_logic_vector(signed(x_weight_2_1_2_i_fu_1000_p2) - signed(tmp_19_2_cast_i_fu_1009_p1));
    y_weight_2_1_2_cast_i_fu_1006_p1 <= std_logic_vector(resize(unsigned(y_weight_2_1_2_i_reg_1567),11));
    y_weight_2_1_2_i_fu_943_p2 <= std_logic_vector(unsigned(tmp66_cast_fu_939_p1) + unsigned(tmp_23_0_1_cast_i_fu_919_p1));
    y_weight_2_2_1_i_fu_1035_p2 <= std_logic_vector(unsigned(y_weight_2_2_i_fu_1018_p2) - unsigned(p_shl_cast_i3_fu_1031_p1));
    y_weight_2_2_2_i_fu_1051_p2 <= std_logic_vector(unsigned(y_weight_2_2_1_i_fu_1035_p2) - unsigned(tmp_19_2_2_cast_i_fu_1041_p1));
    y_weight_2_2_i_fu_1018_p2 <= std_logic_vector(unsigned(y_weight_2_1_2_cast_i_fu_1006_p1) - unsigned(tmp_19_2_cast_i_fu_1009_p1));
    y_window_0_1_1_fu_896_p2 <= std_logic_vector(unsigned(tmp_i2_reg_1546) + unsigned(ap_const_lv8_10));
    y_window_1_1_1_fu_891_p2 <= std_logic_vector(unsigned(tmp_i1_reg_1541) + unsigned(ap_const_lv8_10));
    y_window_2_1_2_fu_750_p2 <= std_logic_vector(unsigned(tmp_i_reg_1515) + unsigned(ap_const_lv8_10));
end behav;
