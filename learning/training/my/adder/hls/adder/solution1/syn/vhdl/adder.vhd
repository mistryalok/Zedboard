-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity adder is
generic (
    C_S_AXI_AXI_CTRL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXI_CTRL_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_AXI_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_AXI_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_AXI_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_AXI_CTRL_WVALID : IN STD_LOGIC;
    s_axi_AXI_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_AXI_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_AXI_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_AXI_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_AXI_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_AXI_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_AXI_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_AXI_CTRL_RREADY : IN STD_LOGIC;
    s_axi_AXI_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_AXI_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXI_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_AXI_CTRL_BREADY : IN STD_LOGIC;
    s_axi_AXI_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC );
end;


architecture behav of adder is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "adder,hls_ip_2014_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.440000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=150,HLS_SYN_LUT=264}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal a : STD_LOGIC_VECTOR (31 downto 0);
    signal b : STD_LOGIC_VECTOR (31 downto 0);
    signal c : STD_LOGIC_VECTOR (31 downto 0);
    signal c_ap_vld : STD_LOGIC;
    signal ap_rst_n_inv : STD_LOGIC;
    signal adder_AXI_CTRL_s_axi_U_ap_dummy_ce : STD_LOGIC;

    component adder_AXI_CTRL_s_axi IS
    generic (
        C_ADDR_WIDTH : INTEGER;
        C_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        a : OUT STD_LOGIC_VECTOR (31 downto 0);
        b : OUT STD_LOGIC_VECTOR (31 downto 0);
        c : IN STD_LOGIC_VECTOR (31 downto 0);
        c_ap_vld : IN STD_LOGIC );
    end component;



begin
    adder_AXI_CTRL_s_axi_U : component adder_AXI_CTRL_s_axi
    generic map (
        C_ADDR_WIDTH => C_S_AXI_AXI_CTRL_ADDR_WIDTH,
        C_DATA_WIDTH => C_S_AXI_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXI_CTRL_AWVALID,
        AWREADY => s_axi_AXI_CTRL_AWREADY,
        AWADDR => s_axi_AXI_CTRL_AWADDR,
        WVALID => s_axi_AXI_CTRL_WVALID,
        WREADY => s_axi_AXI_CTRL_WREADY,
        WDATA => s_axi_AXI_CTRL_WDATA,
        WSTRB => s_axi_AXI_CTRL_WSTRB,
        ARVALID => s_axi_AXI_CTRL_ARVALID,
        ARREADY => s_axi_AXI_CTRL_ARREADY,
        ARADDR => s_axi_AXI_CTRL_ARADDR,
        RVALID => s_axi_AXI_CTRL_RVALID,
        RREADY => s_axi_AXI_CTRL_RREADY,
        RDATA => s_axi_AXI_CTRL_RDATA,
        RRESP => s_axi_AXI_CTRL_RRESP,
        BVALID => s_axi_AXI_CTRL_BVALID,
        BREADY => s_axi_AXI_CTRL_BREADY,
        BRESP => s_axi_AXI_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => adder_AXI_CTRL_s_axi_U_ap_dummy_ce,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        a => a,
        b => b,
        c => c,
        c_ap_vld => c_ap_vld);




    adder_AXI_CTRL_s_axi_U_ap_dummy_ce <= ap_const_logic_1;
    ap_done <= ap_start;
    ap_idle <= ap_const_logic_1;
    ap_ready <= ap_start;

    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    c <= std_logic_vector(unsigned(b) + unsigned(a));

    -- c_ap_vld assign process. --
    c_ap_vld_assign_proc : process(ap_start)
    begin
        if (not((ap_start = ap_const_logic_0))) then 
            c_ap_vld <= ap_const_logic_1;
        else 
            c_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
