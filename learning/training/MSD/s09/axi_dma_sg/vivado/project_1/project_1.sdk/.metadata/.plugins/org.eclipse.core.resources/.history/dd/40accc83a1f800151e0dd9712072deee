/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* XILINX CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "ps7_init.h"
#include <xil_io.h>
#include "xscugic.h"
#include "xparameters.h"

static XScuGic_Config *GicConfig;


/*
 * Int handler
 */

void InterruptHandler() {

	u32 tmpValue;
	tmpValue=Xil_In32(XPAR_AXI_DMA_0_BASEADDR + 0x34);
		tmpValue=tmpValue | 0x1000;
		Xil_Out32(XPAR_AXI_DMA_0_BASEADDR +0x34,tmpValue);


		globleframecounter++;

		if(globleframecounter>10000) {
			xil_printf("Frame num %d",globleframecounter);
			return;
		}

		startDMATransfer(0xa000000,256);

}
/*
 * Setup interrupt
 */

int SetUpInterruptSystem(XScuGic *XScuGicInstancePtr)
{
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
			(Xil_ExceptionHandler)XScuGic_InterruptHandler
			,XScuGicInstancePtr);
	Xil_ExceptionEnable();
	return XST_SUCCESS;
}
/*
 * Initailze Interrupt system
 */
int InitializeInterruptSystem(deviceID)
{
	int status;
	//XScuGic_Config *IntcConfig;

		/*
		 * Initialize the interrupt controller driver so that it is ready to
		 * use.
		 */
		GicConfig = XScuGic_LookupConfig(deviceID);
		if (NULL == GicConfig) {
			return XST_FAILURE;
		}

		Status = XScuGic_CfgInitialize(&InterruptController, GicConfig,
						GicConfig->CpuBaseAddress);
		if (Status != XST_SUCCESS) {
			return XST_FAILURE;
		}

		Status = SetUpInterruptSystem(&InterruptController);
				if (Status != XST_SUCCESS) {
					return XST_FAILURE;
				}

		status=XScuGic_Connect(&InterruptController,XPAR_FABRIC_AXI_DMA_0_S2MM_INTROUT_INTR,
					(Xil_ExceptionHandler)InterruptHandler,NULL);
		if (Status != XST_SUCCESS) {
					return XST_FAILURE;
				}

		XScuGic_Enable(&InterruptController,XPAR_FABRIC_AXI_DMA_0_S2MM_INTROUT_INTR);
		//Xil_ExceptionInit();
		return XST_SUCCESS;
}


/*
 * Enalbe Sample Gen IP
 */

int EnableSampleGenerator(unsigned int numberOfWords)
{

	Xil_Out32(XPAR_AXI_GPIO_0_BASEADDR, numberOfWords);

	Xil_Out32(XPAR_AXI_GPIO_1_BASEADDR, 1);

	return 0;

}


/*
 * Init AXI DMA function
 */
int InitializeAXIDma(void)

{
	unsigned tmpVal;
	tmpVal=Xil_In32(XPAR_AXI_DMA_0_BASEADDR + 0x30);
	tmpVal=tmpVal | 0x1001;
	Xil_Out32(XPAR_AXI_DMA_0_BASEADDR +0x30,tmpVal);
	// Value check
	tmpVal=Xil_In32(XPAR_AXI_DMA_0_BASEADDR + 0x30);
	xil_printf("val of dma register %x",tmpVal);
	return 0;
}
//void print(char *str);

int main()
{
    init_platform();

    	// enable pl
    ps7_post_config();

    //
    xil_printf("Init AXI Dma \n");
    InitializeAXIDma();

    // start sample ip
    xil_printf("Start sample gen \n ");
    EnableSampleGenerator(32);

    //init interrupt
    xil_printf("Enable the interrupt \n\r");
    InitializeInterruptSystem(XPAR_PS7_SCUGIC_0_DEVICE_ID);


    xil_printf("Hello World\n\r");


    cleanup_platform();
    return 0;
}
